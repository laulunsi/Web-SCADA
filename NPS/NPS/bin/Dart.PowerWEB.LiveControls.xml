<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dart.PowerWEB.LiveControls</name>
    </assembly>
    <members>
        <member name="T:Dart.PowerWEB.LiveControls.Design.About">
            <summary>Documentation stub</summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.Design.About.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Windows.Forms.IWin32Window)">
            <summary>Documentation stub</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Design.AboutForm">
            <summary>
            Summary description for AboutBoxForm.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.Design.AboutForm.#ctor">
            <summary>Documentation stub</summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.Design.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.Design.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code LiveControls.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.CallbackManager">
            <summary>
            This class is not meant to be used by developers.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.CallbackManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.CallbackManager.Init(System.Web.HttpApplication)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.CallbackManager.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Design.AboutBoxDesigner">
            <summary>
            Base class for many LiveControl designers
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Design.LiveButtonDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Design.LiveDataGridDesigner">
            <summary>
            Summary description for LiveDataGridDesigner.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.Design.LiveDataGridDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.Design.LiveDataGridDesigner.GetErrorDesignTimeHtml(System.Exception)">
            <summary>
            For better debugging support
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.Design.LiveDataGridDesigner.Verbs">
            <summary>
            Override to use our own EventHandler for Property Builder (cannot use Verbs.Clear() for some reason MJB)
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Design.LiveCheckboxDesigner">
            <summary>
            Summary description for LiveCheckBoxDesigner.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.CallbackType">
            <summary>Enumerates values which describe the  type of callback mechanism in use.</summary><remarks>
				<p>This enumeration is used by the Callback property.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.CallbackType.AutoDetect">
            <summary>The callback type to use is automatically detected.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.CallbackType.XmlHttp">
            <summary>Callbacks performed with the XmlHttp object.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.CallbackType.Flash">
            <summary>Callbacks performed with the Flash plugin.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.CallbackType.IFrame">
            <summary>Callbacks performed with IFrame.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.CallbackType.None">
            <summary>Postbacks are used in place of callbacks.</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.BrowserType">
            <summary>Enumerates values which describe the Web browser in use.</summary><remarks>
				<p>This enumeration is used by the BrowserType property.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.NotSet">
            <summary>The Web browser is not set.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.Unsupported">
            <summary>An unsupported Web browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.IE">
            <summary>The Internet Explorer Web browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.Mozilla">
            <summary>The Mozilla Web browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.IE5">
            <summary>The Internet Explorer 5 Web browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.IE5Mac">
            <summary>The Internet Explorer Web browser for Mac.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.Opera">
            <summary>The Opera Web browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.Konqueror">
            <summary>The Konqueror Web browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.Galeon">
            <summary>The Galeon Web browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.Netscape6">
            <summary>Netscape 6, which requires special handling seperate than Netscape 7.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.BrowserType.OperaXmlHttp">
            <summary>The Opera XmlHttp-capable Web browser.</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.ErrorBehavior">
            <summary>Enumerates values which describe the behavior when an error condition occurs.</summary><remarks>
				<p>This enumeration is used by the ErrorBehavior property.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.ErrorBehavior.ShowAlert">
            <summary>Show an alert box with the value of the ErrorMessage property.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.ErrorBehavior.ShowInBrowser">
            <summary>Show the exception in the browser.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.ErrorBehavior.Eat">
            <summary>Do not show the exception.</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.DialogType">
            <summary>Enumerates values which describe types of JavaScript message box.</summary><remarks>
				<p>This enumeration is used as a parameter of the LiveMessageBox control.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.DialogType.Alert">
            <summary>Show an alert box (a message with an OK button).</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.DialogType.Prompt">
            <summary>Show a prompt box (a message with OK and Cancel buttons, and an input field).</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.DialogType.Confirm">
            <summary>Show a confirm box (a message with OK and Cancel buttons).</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.KeyEventArgs">
            <summary>Provides data for the KeyDown, KeyPress or KeyUp event.</summary><remarks>
				<p>A <b>KeyEventArgs</b>, which specifies the key the user pressed and whether any modifier keys (CTRL, ALT, and SHIFT) were pressed at the same time, is passed with each KeyDown, KeyPress or KeyUp event.</p>
				<p>The KeyDown event occurs when the user presses any key. The KeyUp event occurs when the user releases the key. Duplicate KeyDown events occur each time the key repeats, if the key is held down, but only one KeyUp event is generated when the user releases the key. The KeyPress event also occurs when a key is depressed.</p>
				<p>For information about the event model, see Events and Delegates.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.KeyEventArgs.#ctor">
            <summary>Initializes a new instance of KeyEventArgs.</summary><remarks>
				<p>The default constructor initializes a new instance of KeyEventArgs.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.KeyEventArgs.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of KeyEventArgs.</summary><remarks>
				<p>The constructor initializes a new instance of KeyEventArgs with KeyEventArgs.KeyCode, KeyEventArgs.Alt, KeyEventArgs.Control, KeyEventArgs.Shift.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.KeyEventArgs.Alt">
            <summary>Gets a value indicating whether the ALT key was pressed.</summary><remarks>
				<p>Use this property to determine if the ALT key was pressed during the PowerWEB control event.</p>
			</remarks><value><b>true</b> if the ALT key was pressed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.KeyEventArgs.Control">
            <summary>Gets a value indicating whether the CTRL key was pressed.</summary><remarks>
				<p>Use this property to determine if the CTRL key was pressed during the PowerWEB control event.</p>
			</remarks><value><b>true</b> if the CTRL key was pressed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.KeyEventArgs.KeyCode">
            <summary>Gets the keyboard code for a KeyEventArgs.KeyDown, KeyEventArgs.KeyPress or KeyEventArgs.KeyUp event.</summary><remarks>
				<p>Use this property to determine the key corresponding to PowerWEB control event.</p>
			</remarks><value>A Keys value that is the key code for the event.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.KeyEventArgs.Shift">
            <summary>Gets a value indicating whether the SHIFT key was pressed.</summary><remarks>
				<p>Use this property to determine if the SHIFT key was pressed during the PowerWEB control event.</p>
			</remarks><value><b>true</b> if the SHIFT key was pressed; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LocationEventArgs">
            <summary>Provides location data for any events that occur when a user clicks on a PowerWEB control.</summary><remarks>
				<p>This class passes the location on the page where a user clicked a PowerWEB control as x and y coordinates. You can then use event handlers to programmatically respond to the event based on the value of these coordinates.</p>
				<p>
					<b>   Note</b>   The origin coordinates (0,0) are located at the upper left corner of the WebForm.</p>
				<p>Raising an event invokes the event handler through a delegate. For more information, see Raising an Event.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LocationEventArgs.#ctor">
            <summary>Initializes a new instance of LocationEventArgs.</summary><remarks>
				<p>The default constructor initializes a new instance of LocationEventArgs.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LocationEventArgs.#ctor(System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>Initializes a new instance of LocationEventArgs.</summary><remarks>
				<p>The constructor initializes a new instance of LocationEventArgs with (X, Y) coordinates.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LocationEventArgs.X">
            <summary>Gets or sets the x-coordinate of the WebForm when the mouse is clicked.</summary><remarks>
				<p>Use this property with LocationEventArgs.Y to determine the location of the mouse click.</p>
			</remarks><value>A Unit corresponding to the x-coordinate of the mouse click.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LocationEventArgs.Y">
            <summary>Gets or sets the y-coordinate of the WebForm when the mouse is clicked.</summary><remarks>
				<p>Use this property with LocationEventArgs.X to determine the location of the mouse click.</p>
			</remarks><value>A Unit corresponding to the y-coordinate of the mouse click.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LocationEventHandler">
            <summary>The delegate for events that require location information.</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.KeyEventHandler">
            <summary>The delegate for the Key event.</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Helper">
            <summary>
            Summary description for Common.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlAttribute">
            <summary>
            The HtmlAttribute object represents a named value associated with an HtmlElement.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlAttribute.#ctor(System.String,System.String)">
            <summary>
            This constructs an HtmlAttribute object with the given name and value. For wierd
            HTML attributes that don't have a value (e.g. "NOWRAP"), specify null as the value.
            </summary>
            <param name="name">The name of the attribute</param>
            <param name="value">The value of the attribute</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlAttribute.ToString">
            <summary>
            This will return an HTML-formatted version of this attribute. NB. This is
            not SGML or XHTML safe, as it caters for null-value attributes such as "NOWRAP".
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlAttribute.Name">
            <summary>
            The name of the attribute. e.g. WIDTH
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlAttribute.Value">
            <summary>
            The value of the attribute. e.g. 100%
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlAttributeCollection">
            <summary>
            This is a collection of attributes. Typically, this is associated with a particular
            element. This collection is searchable by both the index and the name of the attribute.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlAttributeCollection.#ctor(Dart.PowerWEB.LiveControls.HtmlElement)">
            <summary>
            This will create an empty collection of attributes.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlAttributeCollection.Add(Dart.PowerWEB.LiveControls.HtmlAttribute)">
            <summary>
            This will add an element to the collection.
            </summary>
            <param name="attribute">The attribute to add.</param>
            <returns>The index at which it was added.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlAttributeCollection.FindByName(System.String)">
            <summary>
            This will search the collection for the named attribute. If it is not found, this
            will return null.
            </summary>
            <param name="name">The name of the attribute to find.</param>
            <returns>The attribute, or null if it wasn't found.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlAttributeCollection.IndexOf(System.String)">
            <summary>
            This will return the index of the attribute with the specified name. If it is
            not found, this method will return -1.
            </summary>
            <param name="name">The name of the attribute to find.</param>
            <returns>The zero-based index, or -1.</returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlAttributeCollection.Item(System.Int32)">
            <summary>
            This provides direct access to an attribute in the collection by its index.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlAttributeCollection.Item(System.String)">
            <summary>
            This overload allows you to have direct access to an attribute by providing
            its name. If the attribute does not exist, null is returned.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlDocument">
            <summary>
            This is the basic HTML document object used to represent a sequence of HTML.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlDocument.#ctor(System.String,System.Boolean)">
            <summary>
            This will create a new document object by parsing the HTML specified.
            </summary>
            <param name="html">The HTML to parse.</param>
            <param name="wantSpaces"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlDocument.Create(System.String)">
            <summary>
            This will create a new document object by parsing the HTML specified.
            </summary>
            <param name="html">The HTML to parse.</param>
            <returns>An instance of the newly created object.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlDocument.Create(System.String,System.Boolean)">
            <summary>
            This will create a new document object by parsing the HTML specified.
            </summary>
            <param name="html">The HTML to parse.</param>
            <param name="wantSpaces">Set this to true if you want to preserve all whitespace from the input HTML</param>
            <returns>An instance of the newly created object.</returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlDocument.Nodes">
            <summary>
            This is the collection of nodes used to represent this document.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlDocument.HTML">
            <summary>
            This will return the HTML used to represent this document.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlDocument.XHTML">
            <summary>
            This will return the XHTML document used to represent this document.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlElement">
            <summary>
            The HtmlElement object represents any HTML element. An element has a name
            and zero or more attributes.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlNode">
            <summary>
            The HtmlNode is the base for all objects that may appear in HTML. Currently, 
            this implemention only supports HtmlText and HtmlElement node types.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNode.#ctor">
            <summary>
            This constructor is used by the subclasses.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNode.ToString">
            <summary>
            This will render the node as it would appear in HTML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNode.IsDescendentOf(Dart.PowerWEB.LiveControls.HtmlNode)">
            <summary>
            This will return true if the node passed is a descendent of this node.
            </summary>
            <param name="node">The node that might be the parent or grandparent (etc.)</param>
            <returns>True if this node is a descendent of the one passed in.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNode.IsAncestorOf(Dart.PowerWEB.LiveControls.HtmlNode)">
            <summary>
            This will return true if the node passed is one of the children or grandchildren of this node.
            </summary>
            <param name="node">The node that might be a child.</param>
            <returns>True if this node is an ancestor of the one specified.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNode.GetCommonAncestor(Dart.PowerWEB.LiveControls.HtmlNode)">
            <summary>
            This will return the ancstor that is common to this node and the one specified.
            </summary>
            <param name="node">The possible node that is relative</param>
            <returns>The common ancestor, or null if there is none</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNode.Remove">
            <summary>
            This will remove this node and all child nodes from the tree. If this
            is a root node, this operation will do nothing.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNode.SetParent(Dart.PowerWEB.LiveControls.HtmlElement)">
            <summary>
            Internal method to maintain the identity of the parent node.
            </summary>
            <param name="parentNode">The parent node of this one</param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.Parent">
            <summary>
            This will return the parent of this node, or null if there is none.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.Next">
            <summary>
            This will return the next sibling node. If this is the last one, it will return null.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.Previous">
            <summary>
            This will return the previous sibling node. If this is the first one, it will return null.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.FirstChild">
            <summary>
            This will return the first child node. If there are no children, this
            will return null.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.LastChild">
            <summary>
            This will return the last child node. If there are no children, this
            will return null.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.Index">
            <summary>
            This will return the index position within the parent's nodes that this one resides.
            If this is not in a collection, this will return -1.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.IsRoot">
            <summary>
            This will return true if this is a root node (has no parent).
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.IsChild">
            <summary>
            This will return true if this is a child node (has a parent).
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.HTML">
            <summary>
            This will return the full HTML to represent this node (and all child nodes).
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNode.XHTML">
            <summary>
            This will return the full XHTML to represent this node (and all child nodes)
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlElement.#ctor(System.String)">
            <summary>
            This constructs a new HTML element with the specified tag name.
            </summary>
            <param name="name">The name of this element</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlElement.ToString">
            <summary>
            This will return the HTML representation of this element.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlElement.Name">
            <summary>
            This is the tag name of the element. e.g. BR, BODY, TABLE etc.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlElement.Nodes">
            <summary>
            This is the collection of all child nodes of this one. If this node is actually
            a text node, this will throw an InvalidOperationException exception.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlElement.Attributes">
            <summary>
            This is the collection of attributes associated with this element.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlElement.IsTerminated">
            <summary>
            This flag indicates that the element is explicitly closed using the "<name/>" method.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlElement.IsExplicitlyTerminated">
            <summary>
            This flag indicates that the element is explicitly closed using the "&lt;/name&gt;" method.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlElement.HTML">
            <summary>
            This will return the HTML for this element and all subnodes.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlElement.XHTML">
            <summary>
            This will return the XHTML for this element and all subnodes.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlEncoder">
            <summary>
            HTML 4 Entity coding routines
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlNodeCollection">
            <summary>
            This object represents a collection of HtmlNodes, which can be either HtmlText
            or HtmlElement objects. The order in which the nodes occur directly corresponds
            to the order in which they appear in the original HTML document.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.#ctor(Dart.PowerWEB.LiveControls.HtmlElement)">
            <summary>
            A collection is usually associated with a parent node (an HtmlElement, actually)
            but you can pass null to implement an abstracted collection.
            </summary>
            <param name="parent">The parent element, or null if it is not appropriate</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.Add(Dart.PowerWEB.LiveControls.HtmlNode)">
            <summary>
            This will add a node to the collection.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.IndexOf(Dart.PowerWEB.LiveControls.HtmlNode)">
            <summary>
            This is used to identify the index of this node as it appears in the collection.
            </summary>
            <param name="node">The node to test</param>
            <returns>The index of the node, or -1 if it is not in this collection</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.Insert(System.Int32,Dart.PowerWEB.LiveControls.HtmlNode)">
            <summary>
            This will insert a node at the given position
            </summary>
            <param name="index">The position at which to insert the node.</param>
            <param name="node">The node to insert.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.FindByName(System.String)">
            <summary>
            This will search though this collection of nodes for all elements with the
            specified name. If you want to search the subnodes recursively, you should
            pass True as the parameter in searchChildren. This search is guaranteed to
            return nodes in the order in which they are found in the document.
            </summary>
            <param name="name">The name of the element to find</param>
            <returns>A collection of all the nodes that macth.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.FindByName(System.String,System.Boolean)">
            <summary>
            This will search though this collection of nodes for all elements with the
            specified name. If you want to search the subnodes recursively, you should
            pass True as the parameter in searchChildren. This search is guaranteed to
            return nodes in the order in which they are found in the document.
            </summary>
            <param name="name">The name of the element to find</param>
            <param name="searchChildren">True if you want to search sub-nodes, False to
            only search this collection.</param>
            <returns>A collection of all the nodes that macth.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.FindByAttributeName(System.String)">
            <summary>
            This will search though this collection of nodes for all elements with the an
            attribute with the given name. 
            </summary>
            <param name="attributeName">The name of the attribute to find</param>
            <returns>A collection of all the nodes that macth.</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlNodeCollection.FindByAttributeName(System.String,System.Boolean)">
            <summary>
            This will search though this collection of nodes for all elements with the an
            attribute with the given name. 
            </summary>
            <param name="attributeName">The name of the attribute to find</param>
            <param name="searchChildren">True if you want to search sub-nodes, False to
            only search this collection.</param>
            <returns>A collection of all the nodes that macth.</returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNodeCollection.Item(System.Int32)">
            <summary>
            This property allows you to change the node at a particular position in the
            collection.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlNodeCollection.Item(System.String)">
            <summary>
            This allows you to directly access the first element in this colleciton with the given name.
            If the node does not exist, this will return null.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlParser">
            <summary>
            This is the main HTML parser class. I recommend you don't play around too much in here
            as it's a little fiddly.
            
            Bascially, this class will build a tree containing HtmlNode elements.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.#ctor">
            <summary>
            This constructs a new parser. Even though this object is currently stateless,
            in the future, parameters coping for tollerance and SGML (etc.) will be passed.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.Parse(System.String)">
            <summary>
            This will parse a string containing HTML and will produce a domain tree.
            </summary>
            <param name="html">The HTML to be parsed</param>
            <returns>A tree representing the elements</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.MoveNodesDown(Dart.PowerWEB.LiveControls.HtmlNodeCollection@,System.Int32,Dart.PowerWEB.LiveControls.HtmlElement)">
            <summary>
            This will move all the nodes from the specified index to the new parent.
            </summary>
            <param name="nodes">The collection of nodes</param>
            <param name="node_index">The index of the first node (in the above collection) to move</param>
            <param name="new_parent">The node which will become the parent of the moved nodes</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.FindTagOpenNodeIndex(Dart.PowerWEB.LiveControls.HtmlNodeCollection,System.String)">
            <summary>
            This will find the corresponding opening tag for the named one. This is identified as
            the most recently read node with the same name, but with no child nodes.
            </summary>
            <param name="nodes">The collection of nodes</param>
            <param name="name">The name of the tag</param>
            <returns>The index of the opening tag, or -1 if it was not found</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.RemoveWhitespace(System.String)">
            <summary>
            This will remove redundant whitespace from the string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.RemoveComments(System.String)">
            <summary>
            This will remove all HTML comments from the input string. This will
            not remove comment markers from inside tag attribute values.
            </summary>
            <param name="input">Input HTML containing comments</param>
            <returns>HTML containing no comments</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.RemoveSGMLComments(System.String)">
            <summary>
            This will remove all HTML comments from the input string. This will
            not remove comment markers from inside tag attribute values.
            </summary>
            <param name="input">Input HTML containing comments</param>
            <returns>HTML containing no comments</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.PreprocessScript(System.String,System.String)">
            <summary>
            This will encode the scripts within the page so they get passed through the
            parser properly. This is due to some people using comments protect the script
            and others who don't. It also takes care of issues where the script itself has
            HTML comments in (in strings, for example).
            </summary>
            <param name="input">The HTML to examine</param>
            <param name="tag_name"></param>
            <returns>The HTML with the scripts marked up differently</returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlParser.GetTokens(System.String)">
            <summary>
            This will tokenise the HTML input string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlParser.RemoveEmptyElementText">
            <summary>
            The default mechanism will extract a pure DOM tree, which will contain many text
            nodes containing just whitespace (carriage returns etc.) However, with normal
            parsing, these are useless and only serve to complicate matters. Therefore, this
            option exists to automatically remove those empty text nodes.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlParser.ParseStatus">
            <summary>
            Internal FSM to represent the state of the parser
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.HtmlText">
            <summary>
            The HtmlText node represents a simple piece of text from the document.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlText.#ctor(System.String)">
            <summary>
            This constructs a new node with the given text content.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.HtmlText.ToString">
            <summary>
            This will return the text for outputting inside an HTML document.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlText.Text">
            <summary>
            This is the text associated with this node.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlText.HTML">
            <summary>
            This will return the HTML to represent this text object.
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.HtmlText.XHTML">
            <summary>
            This will return the XHTML to represent this text object.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.ILiveCallbackHandler">
            <summary>Provides an interface for PowerWEB controls that performs callbacks.</summary><remarks><p>Implementing this interface enables a designer to add callback abilities to a PowerWEB control.</p></remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveCallbackHandler.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveCallbackHandler.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveCallbackHandler.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveCallbackHandler.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveCallbackHandler.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveCallbackHandler.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveCallbackHandler.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.ILiveControl">
            <summary>Provides an interface for PowerWEB controls.</summary><remarks><p>Implementing this interface enables a designer to add Live capabilities to a server control.</p></remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ILiveControl.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ILiveControl.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ILiveControl.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ILiveControl.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveControl.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveControl.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveControl.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveControl.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveControl.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveControl.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveControl.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.ILiveWebControl">
            <summary>Provides an interface for visual PowerWEB controls.</summary><remarks><p>Implementing this interface enables a designer to add <i>Live</i> capabilities to a server control with visual properties.</p></remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveWebControl.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ILiveWebControl.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.ILiveWebControl.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveBoundColumn">
            <summary>A column type for the LiveDataGrid control that is bound to a field in a data source.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumnClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveDataGridColumn">
            <summary>
			Serves as the base class for the different column types of the DataGrid control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridColumnTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridColumn&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridColumn.#ctor">
            <summary>
			Initializes a new instance of the DataGridColumn class.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridColumnctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridColumn Constructor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridColumn.OnColumnChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
			Provides the base implementation to reset the specified cell from a column derived from the DataGridColumn class its initial values.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridColumnInitializeCellTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridColumn.InitializeCell&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridColumn.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.LiveBoundColumn.boundField">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.LiveBoundColumn.boundFieldDesc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.LiveBoundColumn.boundFieldDescValid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.LiveBoundColumn.formatting">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveBoundColumn.#ctor">
            <summary>Initializes a new instance of LiveBoundColumn.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumnClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveBoundColumn.Initialize">
            <summary>
			Resets the LiveBoundColumn to its initial state.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassInitializeTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumn.Initialize&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveBoundColumn.FormatDataValue(System.Object)">
            <summary>
            
            </summary>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveBoundColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassInitializeCellTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumnClass.InitializeCell&lt;z/MSHelp:link&gt;z.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassInitializeCellTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumnClass.InitializeCell&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveBoundColumn.DataField">
            <summary>
			Gets or sets the field name from the data source to bind to the LiveBoundColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassDataFieldTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumn.DataField&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveBoundColumn.DataFormatString">
            <summary>
			Gets or sets the string that specifies the display format for items in the column.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassDataFormatStringTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumn.DataFormatString&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveBoundColumn.ReadOnly">
            <summary>
			Gets or sets a value that indicates whether the items in the LiveBoundColumn can be edited.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsBoundColumnClassReadOnlyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.BoundColumn.ReadOnly&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveButton">
            <summary>Displays a <i>Live</i> push button control on the Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.#ctor">
            <summary>Initializes a new instance of LiveButton.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveButton.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButton.Text">
            <summary>Gets or sets the text caption displayed in the LiveButton control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonClassTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonClass.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveButtonColumnType">
            <summary>
			Specifies the button type for the PowerWEB controls.LiveButtonColumn object.
			</summary><remarks>
			the PowerWEB controls.LiveButtonColumnType enumeration represents the button styles for the PowerWEB controls.LiveButtonColumn object.
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.LiveButtonColumnType.LinkButton">
            <summary>
			Specifies the button type for the PowerWEB controls.LiveButtonColumn object.
			</summary><remarks>
			the PowerWEB controls.LiveButtonColumnType enumeration represents the button styles for the PowerWEB controls.LiveButtonColumn object.
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.LiveButtonColumnType.PushButton">
            <summary>
			Specifies the button type for the PowerWEB controls.LiveButtonColumn object.
			</summary><remarks>
			the PowerWEB controls.LiveButtonColumnType enumeration represents the button styles for the PowerWEB controls.LiveButtonColumn object.
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.LiveButtonColumnType.ImageButton">
            <summary>
			Specifies the button type for the PowerWEB controls.LiveButtonColumn object.
			</summary><remarks>
			the PowerWEB controls.LiveButtonColumnType enumeration represents the button styles for the PowerWEB controls.LiveButtonColumn object.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveButtonColumn">
            <summary>A column type for the LiveDataGrid control that contains a user-defined command button, such as <b>Add</b> or <b>Remove</b>, that corresponds with each row in the column.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonColumnClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonColumnClassl&lt;z/MSHelp:link&gt;z.
			</remarks><summary>
			A column type for the DataGrid control that contains a user-defined command button, such as Add or Remove, that corresponds with each row in the column.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonColumnTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonColumn&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButtonColumn.#ctor">
            <summary>Initializes a new instance of LiveButtonColumn.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveButtonColumn.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButtonColumn.FormatDataTextValue(System.Object)">
            <summary>
            
            </summary>
            <param name="dataTextValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButtonColumn.Initialize">
            <summary>
			Resets the ButtonColumn to its initial state.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonColumnInitializeTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonColumn.Initialize&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>Resets the specified cell in the LiveButtonColumn to its initial state.</summary><remarks>
				<p>The <b>InitializeCell</b> method resets the specified cell in the LiveButtonColumn to its initial state.</p>
			</remarks><param name="cell">A TableCell object that represents the cell to reset.</param><param name="columnIndex">The column number where the cell is located.</param><param name="itemType">One of the ListItemType values.</param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButtonColumn.ImageUrl">
            <summary>The url of the image file to display for the button.</summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButtonColumn.ButtonType">
            <summary>
			Gets or sets the type of button to display in the ButtonColumn column.
			</summary><remarks>
				<p>Use this property to specify whether the buttons in the column are displayed as link, image or push buttons. </p>
				<p>Clicking on the command buttons in the column raises the LiveDataGrid.ItemCommand event. </p>
				<p>You can programmatically control the action performed when the command button is clicked by providing an event handler for the LiveDataGrid.ItemCommand event.</p>
			</remarks><value>One of the PowerWEB controls.LiveButtonColumnType values. The default value is <b>LinkButton</b>.</value><exception cref="T:System.ArgumentException">The specified column type is not one of the PowerWEB controls.LiveButtonColumnType values. </exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButtonColumn.CommandName">
            <summary>
			Gets or sets a string that represents the command to perform when a button in the System.Web.UI.WebControls.ButtonColumn is clicked.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonColumnCommandNameTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonColumn.CommandName&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButtonColumn.DataTextField">
            <summary>
			Gets or sets the field name from a data source to bind to the ButtonColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonColumnDataTextFieldTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonColumn.DataTextField&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButtonColumn.DataTextFormatString">
            <summary>
			Gets or sets the string that specifies the display format for the caption in each command button.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonColumnDataTextFormatStringTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonColumn.DataTextFormatString&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveButtonColumn.Text">
            <summary>
			Gets or sets the caption displayed in the command buttons of the ButtonColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsButtonColumnTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ButtonColumn.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveCallback">
            <summary>A control that permits any non-PowerWEB control to become Live enabled.</summary><remarks>
				<p>Use the <b>LiveCallback</b> control to add callbacks to any non-PowerWEB control.</p>
				<p>Usage requires implementation of two JavaScript functions (one that makes the callback and one to handle the response), and a server-side function to be triggered.  See the topic <a href="/topics/UsingVSNETWalkthroughUsingDeadControls.htm">Walkthrough: Manipulating Intrinsic Microsoft Controls in a Callback</a> for more details.</p>
				<p>
					<b>   Note</b>   The server-side function can have a maximum of nine parameters. All parameters must be strings.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.#ctor">
            <summary>Initializes a new instance of LiveCallback.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveFunction.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCallback.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCallback.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveCheckBox">
            <summary>Displays a check box that allows the user to select a <b>true</b> or <b>false</b> condition.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.#ctor">
            <summary>Initializes a new instance of LiveCheckBox.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBox.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBox.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.AutoPostBack">
            <summary>Gets or sets a value indicating whether a postback (or callback) to the server automatically occurs when the user changes the PowerWEB control's list selection or checked state.</summary><remarks>
				<p>For Live List Controls, set this property to true if the server needs to capture the change as soon as it is made. For example, other controls on the Web page can be automatically filled depending on the user's selection from the list control. This property can be used to allow automatic population of other controls on the Web page based on a user's selection from the list.</p>
				<p>For LiveCheckBox and LiveRadioButton, use this property to specify whether the state of the PowerWEB control is posted back to the server when clicked.</p>
				<p><b>   Note</b>   When <b>AutoPostBack</b> is <b>true</b> and EnableCallback is <b>true</b>, the PowerWEB control will perform automatic callbacks.  If EnableCallback is <b>false</b>, traditional postbacks will occur.</p>
			</remarks><value><b>true</b> whenever the user changes the text in the text box and then tabs out of the control; otherwise, <b>false</b>. The default is <b>true</b>, which is different than the non-<i>Live</i> TextBox.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Text">
            <summary>Gets or sets the text label associated with the LiveCheckBox.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxClassTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxClass.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.TextAlign">
            <summary>Gets or sets the alignment of the text label associated with the LiveCheckBox control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxClassTextAlignTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxClass.TextAlign&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBox.Checked">
            <summary>Gets or sets a value indicating whether the LiveCheckBox control is checked.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxClassCheckedTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxClass.Checked&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.NonEditModeBehavior">
            <summary>Enumerates values which describe the behavior of LiveCheckBoxColumn when in non-edit mode.</summary><remarks>
				<p>This enumeration is used by the LiveCheckBoxColumn.NonEditModeBehavior property.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.NonEditModeBehavior.Text">
            <summary>The text representation of the cell contents (not a check box).</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.NonEditModeBehavior.EnabledCheckBox">
            <summary>The check boxes are enabled.</summary>
        </member>
        <member name="F:Dart.PowerWEB.LiveControls.NonEditModeBehavior.DisabledCheckBox">
            <summary>The check boxes are disabled.</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn">
            <summary>A column type for the LiveDataGrid control that contains check boxes.</summary><remarks>
				<p>Use the <b>LiveCheckBoxColumn</b> column type in a LiveDataGrid control to create a check box that corresponds with each row in the LiveDataGrid control.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn.#ctor">
            <summary>Initializes a new instance of LiveCheckBoxColumn.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveCheckBoxColumn.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>Resets the specified cell in the LiveCheckBoxColumn to its initial state.</summary><remarks>
				<p>The <b>InitializeCell</b> method resets the specified cell in the LiveCheckBoxColumn to its initial state.</p>
			</remarks><param name="cell">A TableCell object that represents the cell to reset.</param><param name="columnIndex">The column number where the cell is located.</param><param name="itemType">One of the ListItemType values.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn.Initialize">
            <summary>
			Resets the LiveCheckBoxColumn to its initial state.
			</summary><remarks>
			Use the Initialize method to reset the LiveCheckBoxColumn to its initial state.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn.FormatDataTextValue(System.Object)">
            <summary>
            
            </summary>
            <param name="dataTextValue"></param>
            <returns></returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn.AutoPostback">
            <summary>Gets or sets a value indicating whether the check boxes automatically post back to the server when checked.</summary><remarks>
				<p>Use this property to specify whether the state of the LiveCheckBoxColumn is posted back to the server when clicked (via callback or postback, depending on the value of EnableCallback).</p>
			</remarks><value><b>true</b> to automatically post to the server; otherwise, <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn.DataField">
            <summary>
			Gets or sets the field name from the data source to bind to the LiveCheckBoxColumn.
			</summary><remarks>
			Use the <b>DataField</b> property to specify the field to bind to the LiveCheckBoxColumn.
			</remarks><value>
			The name of the field to bind to the LiveCheckBoxColumn. The default value is String.Empty.
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxColumn.NonEditModeBehavior">
            <summary>Gets or sets a value indicating the behavior of the control when not in edit mode.</summary><remarks>
				<p>Use this property to specify the behavior of the LiveCheckBoxColumn when it is not in edit mode.  Options include <b>DisabledCheckBox</b>, <b>EnabledCheckBox</b>, and <b>Text</b>.</p>
			</remarks><value>One of the NonEditModeBehavior values.  The default is <b>DisabledCheckBox</b>.</value><exception cref="T:System.ArgumentException">The specified value is not one of the NonEditModeBehavior values.</exception>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveCheckBoxList">
            <summary>Creates a multi selection check box group that can be dynamically created by binding the control to a data source.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClass&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates different ways of adding items to a Live List control.

<code lang="Visual Basic">
'In the following examples, items are added to all four types of Live List controls
'These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
'Each Live List control can be interchanged with another

'Add items using an ArrayList, and show a LiveMessageBox when an item is selected

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveRadioButtonList1.DataSource = arrayItems
    LiveRadioButtonList1.DataBind()
End Sub

Private Sub LiveRadioButtonList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveRadioButtonList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveRadioButtonList1.SelectedIndex)
    Case 0
        LiveMessageBox1.Show("You have selected 'Alert'", DialogType.Alert)
        Case 1
        LiveMessageBox1.Show("You have selected 'Confirm'", DialogType.Confirm)
        Case 2
        LiveMessageBox1.Show("You have selected 'Prompt'", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then
        If (e.Confirmed) Then
        LiveTextBox1.Text = "The OK button was pressed"
        Else
        LiveTextBox1.Text = "The Cancel button was pressed"
        End If

        'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
        LiveTextBox1.Text = "The Prompt was cancelled"
        Else
        LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub


'Add items dynamically, when a LiveButton is pressed

Private Sub LiveButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton2.Click
    'Add items dynamically in code to a list control
    'When the LiveButton is pressed, a new item is added to the list
    LiveListBox1.Items.Add(DateTime.Now.ToString())
End Sub

Private Sub LiveListBox1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveListBox1.SelectedIndexChanged
    'A LiveLabel is updated whenever an item is selected from the list
    LiveLabel1.Text = "This item was added at " + LiveListBox1.Items(LiveListBox1.SelectedIndex).ToString()
End Sub


'Add items from a database, and display an image when an item is selected

Private Sub LiveButton3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton3.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(dataSet, "images")

    'Bind the database to the Live List
    LiveDropDownList1.DataSource = dataSet
    LiveDropDownList1.DataMember = "images"
    LiveDropDownList1.DataTextField = "filename"
    LiveDropDownList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveDropDownList1.SelectedIndex = 0
    LiveDropDownList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveDropDownList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveDropDownList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text
End Sub


'Add items to the Items.Collection and play a sound when an item is selected

Private Sub LiveButton4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton4.Click
    'Add items to the Live list control via the ListItemCollection
    LiveCheckBoxList1.Items.Add("chord.wav")
    LiveCheckBoxList1.Items.Add("chimes.wav")
    LiveCheckBoxList1.Items.Add("exclamation.wav")
    LiveCheckBoxList1.Items.Add("error.wav")
End Sub

Private Sub LiveCheckBoxList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveCheckBoxList1.SelectedIndexChanged
    'When an item in the LiveCheckBoxList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveCheckBoxList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items(LiveCheckBoxList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In the following examples, items are added to all four types of Live List controls
//These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
//Each Live List control can be interchanged with another

//Add items using an ArrayList, and show a LiveMessageBox when an item is selected

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveRadioButtonList1.DataSource = arrayItems;
	LiveRadioButtonList1.DataBind();
}

private void LiveRadioButtonList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveRadioButtonList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

//Add items dynamically, when a LiveButton is pressed

private void LiveButton2_Click(object sender, System.EventArgs e)
{
	//Add items dynamically in code to a list control
	//When the LiveButton is pressed, a new item is added to the list
	LiveListBox1.Items.Add(DateTime.Now.ToString());
}

private void LiveListBox1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//A LiveLabel is updated whenever an item is selected from the list
	LiveLabel1.Text = "This item was added at " + LiveListBox1.Items[LiveListBox1.SelectedIndex];
}


//Add items from a database, and display an image when an item is selected

private void LiveButton3_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveDropDownList1.DataSource = dataSet;
	LiveDropDownList1.DataMember = "images";
	LiveDropDownList1.DataTextField = "filename";
	LiveDropDownList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveDropDownList1.SelectedIndex = 0;
	LiveDropDownList1_SelectedIndexChanged(this, null);
}

private void LiveDropDownList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text;
}

//Add items to the Items.Collection and play a sound when an item is selected
		
private void LiveButton4_Click(object sender, System.EventArgs e)
{
	//Add items to the Live list control via the ListItemCollection
	LiveCheckBoxList1.Items.Add("chord.wav");
	LiveCheckBoxList1.Items.Add("chimes.wav");
	LiveCheckBoxList1.Items.Add("exclamation.wav");
	LiveCheckBoxList1.Items.Add("error.wav");
}

private void LiveCheckBoxList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the LiveCheckBoxList is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveCheckBoxList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items[LiveCheckBoxList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.#ctor">
            <summary>Initializes a new instance of LiveCheckBoxList.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.SaveViewState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveCheckBoxList.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.AutoPostBack">
            <summary>Gets or sets a value indicating whether a postback (or callback) to the server automatically occurs when the user changes the PowerWEB control's list selection or checked state.</summary><remarks>
				<p>For Live List Controls, set this property to true if the server needs to capture the change as soon as it is made. For example, other controls on the Web page can be automatically filled depending on the user's selection from the list control. This property can be used to allow automatic population of other controls on the Web page based on a user's selection from the list.</p>
				<p>For LiveCheckBox and LiveRadioButton, use this property to specify whether the state of the PowerWEB control is posted back to the server when clicked.</p>
				<p><b>   Note</b>   When <b>AutoPostBack</b> is <b>true</b> and EnableCallback is <b>true</b>, the PowerWEB control will perform automatic callbacks.  If EnableCallback is <b>false</b>, traditional postbacks will occur.</p>
			</remarks><value><b>true</b> whenever the user changes the text in the text box and then tabs out of the control; otherwise, <b>false</b>. The default is <b>true</b>, which is different than the non-<i>Live</i> TextBox.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.SelectedIndex">
            <summary>Gets or sets the lowest ordinal index of the selected items in the list.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListControlClassSelectedIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListControlClass.SelectedIndex&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic">
'In this example, items are added to a Live List using Items.Add
'The items are sounds to be played, located in a "sounds" folder
'When one of the items is selected, the corresponding sound is played
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Add items to the Live list control via the ListItemCollection
    LiveList1.Items.Add("chord.wav")
    LiveList1.Items.Add("chimes.wav")
    LiveList1.Items.Add("exclamation.wav")
    LiveList1.Items.Add("error.wav")
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When an item in the LiveList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveList1.Items(LiveList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List using Items.Add
//The items are sounds to be played, located in a "sounds" folder
//When one of the items is selected, the corresponding sound is played
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Add items to the Live List control via the ListItemCollection
	LiveList1.Items.Add("chord.wav");
	LiveList1.Items.Add("chimes.wav");
	LiveList1.Items.Add("exclamation.wav");
	LiveList1.Items.Add("error.wav");
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the Live List is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveList1.Items[LiveList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.CellPadding">
            <summary>Gets or sets the distance (in pixels) between the border and contents of the cell.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassCellPaddingTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClass.CellPadding&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.CellSpacing">
            <summary>Gets or sets the distance (in pixels) between cells.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassCellSpacingTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClass.CellSpacing&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.RepeatColumns">
            <summary>Gets or sets the number of columns to display in the LiveCheckBoxList control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassRepeatColumnsTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClass.RepeatColumns&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.RepeatDirection">
            <summary>Gets or sets a value that indicates whether the control displays vertically or horizontally.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassRepeatDirectionTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClass.RepeatDirection&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.RepeatLayout">
            <summary>Gets or sets the layout of the check boxes.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassRepeatLayoutTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClass.RepeatLayout&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.TextAlign">
            <summary>Gets or sets the text alignment for the check boxes within the group.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsCheckBoxListClassTextAlignTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.CheckBoxListClass.TextAlign&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveCheckBoxList.SelectedIndexChanged">
            <summary>Occurs when the selection from the list control changes between posts to the server.</summary><remarks>
				<p>The <b>SelectedIndexChanged</b> event is raised when the selection from the list control changes between posts to the server.</p>
				<p>
					<b>Note   </b>A list control must persist some values between posts to the server for this event to work correctly. Be sure that view state is enabled for the list control.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveCheckBoxList.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveDataGrid">
            <summary>A data bound list control that displays the items from data source in a table. The <b>LiveDataGrid</b> control allows you to select, sort, and edit these items.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.#ctor">
            <summary>Initializes a new instance of LiveGrid.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.OnSortCommand(System.Web.UI.WebControls.DataGridSortCommandEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.OnUpdateCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.OnItemCommand(System.Web.UI.WebControls.DataGridCommandEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.CreateColumnSet(System.Web.UI.WebControls.PagedDataSource,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dataSource"></param>
            <param name="useDataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.InitializeItem(System.Web.UI.WebControls.DataGridItem,System.Web.UI.WebControls.DataGridColumn[])">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.CreateItem(System.Int32,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
            
            </summary>
            <param name="itemIndex"></param>
            <param name="dataSourceIndex"></param>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.InitializePager(System.Web.UI.WebControls.DataGridItem,System.Int32,System.Web.UI.WebControls.PagedDataSource)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="columnSpan"></param>
            <param name="pagedDataSource"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.DataBind">
            <summary>Binds the control and all its child controls to the data source specified by the BaseDataList.DataSource property.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIControlClassDataBindTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.ControlClass.DataBind&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.SaveViewState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGrid.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.EditItemIndex">
            <summary>Gets or sets the index of an item in the LiveDataGrid control to edit.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridClassEditItemIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridClass.EditItemIndex&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.SelectedIndex">
            <summary>Gets or sets the index of the selected item in the LiveDataGrid control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridClassSelectedIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridClass.SelectedIndex&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Columns">
            <summary>Gets a collection of objects that represent the columns of the LiveDataGrid control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridClassColumnsTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridClass.Columns&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGrid.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGrid.CurrentPageIndex">
            <summary>
			Gets or sets the index of the currently displayed page.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridClassCurrentPageIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGrid.CurrentPageIndex&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Design.LiveDataGridComponentEditor">
            <summary>
            Summary description for LiveDataGridComponentEditor.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveDataGridItem">
            <summary>
			Represents an item (row) in a LiveDataGrid control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridItemClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridItem&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.#ctor(System.Int32,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
			Initializes a new instance of the LiveDataGridItem class.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDataGridItemClassCtorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DataGridItem Constructor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.#ctor(System.Int32,System.Int32,System.Web.UI.WebControls.ListItemType,System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDataGridItem.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDataGridItem.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDataGridItem.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveLinkButton">
            <summary>Displays a hyperlink style button control on a Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsLinkButtonClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.LinkButtonClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.#ctor">
            <summary>Initializes a new instance of LiveLinkButton.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsLinkButtonClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.LinkButtonClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLinkButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLinkButton.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLinkButton.Text">
            <summary>Gets or sets the text caption displayed on the LiveLinkButton control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsLinkButtonClassTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.LinkButtonClass.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveDropDownList">
            <summary>Represents a control that allows the user to select a single item from a drop-down list.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDropDownListClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DropDownListClass&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates different ways of adding items to a Live List control.

<code lang="Visual Basic">
'In the following examples, items are added to all four types of Live List controls
'These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
'Each Live List control can be interchanged with another

'Add items using an ArrayList, and show a LiveMessageBox when an item is selected

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveRadioButtonList1.DataSource = arrayItems
    LiveRadioButtonList1.DataBind()
End Sub

Private Sub LiveRadioButtonList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveRadioButtonList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveRadioButtonList1.SelectedIndex)
    Case 0
        LiveMessageBox1.Show("You have selected 'Alert'", DialogType.Alert)
        Case 1
        LiveMessageBox1.Show("You have selected 'Confirm'", DialogType.Confirm)
        Case 2
        LiveMessageBox1.Show("You have selected 'Prompt'", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then
        If (e.Confirmed) Then
        LiveTextBox1.Text = "The OK button was pressed"
        Else
        LiveTextBox1.Text = "The Cancel button was pressed"
        End If

        'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
        LiveTextBox1.Text = "The Prompt was cancelled"
        Else
        LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub


'Add items dynamically, when a LiveButton is pressed

Private Sub LiveButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton2.Click
    'Add items dynamically in code to a list control
    'When the LiveButton is pressed, a new item is added to the list
    LiveListBox1.Items.Add(DateTime.Now.ToString())
End Sub

Private Sub LiveListBox1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveListBox1.SelectedIndexChanged
    'A LiveLabel is updated whenever an item is selected from the list
    LiveLabel1.Text = "This item was added at " + LiveListBox1.Items(LiveListBox1.SelectedIndex).ToString()
End Sub


'Add items from a database, and display an image when an item is selected

Private Sub LiveButton3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton3.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(dataSet, "images")

    'Bind the database to the Live List
    LiveDropDownList1.DataSource = dataSet
    LiveDropDownList1.DataMember = "images"
    LiveDropDownList1.DataTextField = "filename"
    LiveDropDownList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveDropDownList1.SelectedIndex = 0
    LiveDropDownList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveDropDownList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveDropDownList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text
End Sub


'Add items to the Items.Collection and play a sound when an item is selected

Private Sub LiveButton4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton4.Click
    'Add items to the Live list control via the ListItemCollection
    LiveCheckBoxList1.Items.Add("chord.wav")
    LiveCheckBoxList1.Items.Add("chimes.wav")
    LiveCheckBoxList1.Items.Add("exclamation.wav")
    LiveCheckBoxList1.Items.Add("error.wav")
End Sub

Private Sub LiveCheckBoxList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveCheckBoxList1.SelectedIndexChanged
    'When an item in the LiveCheckBoxList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveCheckBoxList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items(LiveCheckBoxList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In the following examples, items are added to all four types of Live List controls
//These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
//Each Live List control can be interchanged with another

//Add items using an ArrayList, and show a LiveMessageBox when an item is selected

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveRadioButtonList1.DataSource = arrayItems;
	LiveRadioButtonList1.DataBind();
}

private void LiveRadioButtonList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveRadioButtonList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

//Add items dynamically, when a LiveButton is pressed

private void LiveButton2_Click(object sender, System.EventArgs e)
{
	//Add items dynamically in code to a list control
	//When the LiveButton is pressed, a new item is added to the list
	LiveListBox1.Items.Add(DateTime.Now.ToString());
}

private void LiveListBox1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//A LiveLabel is updated whenever an item is selected from the list
	LiveLabel1.Text = "This item was added at " + LiveListBox1.Items[LiveListBox1.SelectedIndex];
}


//Add items from a database, and display an image when an item is selected

private void LiveButton3_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveDropDownList1.DataSource = dataSet;
	LiveDropDownList1.DataMember = "images";
	LiveDropDownList1.DataTextField = "filename";
	LiveDropDownList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveDropDownList1.SelectedIndex = 0;
	LiveDropDownList1_SelectedIndexChanged(this, null);
}

private void LiveDropDownList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text;
}

//Add items to the Items.Collection and play a sound when an item is selected
		
private void LiveButton4_Click(object sender, System.EventArgs e)
{
	//Add items to the Live list control via the ListItemCollection
	LiveCheckBoxList1.Items.Add("chord.wav");
	LiveCheckBoxList1.Items.Add("chimes.wav");
	LiveCheckBoxList1.Items.Add("exclamation.wav");
	LiveCheckBoxList1.Items.Add("error.wav");
}

private void LiveCheckBoxList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the LiveCheckBoxList is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveCheckBoxList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items[LiveCheckBoxList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.#ctor">
            <summary>Initializes a new instance of LiveDropDownList.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsDropDownListClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.DropDownListClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownList.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.AutoPostBack">
            <summary>Gets or sets a value indicating whether a postback (or callback) to the server automatically occurs when the user changes the PowerWEB control's list selection or checked state.</summary><remarks>
				<p>For Live List Controls, set this property to true if the server needs to capture the change as soon as it is made. For example, other controls on the Web page can be automatically filled depending on the user's selection from the list control. This property can be used to allow automatic population of other controls on the Web page based on a user's selection from the list.</p>
				<p>For LiveCheckBox and LiveRadioButton, use this property to specify whether the state of the PowerWEB control is posted back to the server when clicked.</p>
				<p><b>   Note</b>   When <b>AutoPostBack</b> is <b>true</b> and EnableCallback is <b>true</b>, the PowerWEB control will perform automatic callbacks.  If EnableCallback is <b>false</b>, traditional postbacks will occur.</p>
			</remarks><value><b>true</b> whenever the user changes the text in the text box and then tabs out of the control; otherwise, <b>false</b>. The default is <b>true</b>, which is different than the non-<i>Live</i> TextBox.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.SelectedIndex">
            <summary>Gets or sets the lowest ordinal index of the selected items in the list.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListControlClassSelectedIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListControlClass.SelectedIndex&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic"> 
'In this example, items are added to a Live List control from a database
'The items are images to be displayed in a LiveImage
'When one of the items is selected, the corresponding image is displayed
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(DataSet, "images")

    'Bind the database to the Live List
    LiveList1.DataSource = DataSet
    LiveList1.DataMember = "images"
    LiveList1.DataTextField = "filename"
    LiveList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveList1.SelectedIndex = 0
    LiveList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles     LiveList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control from a database
//The items are images to be displayed in a LiveImage
//When one of the items is selected, the corresponding image is displayed
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveList1.DataSource = dataSet;
	LiveList1.DataMember = "images";
	LiveList1.DataTextField = "filename";
	LiveList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveList1.SelectedIndex = 0;
	LiveList1_SelectedIndexChanged(this, null);
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveDropDownList.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownList.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveDropDownListColumn">
            <summary>A column type for the LiveDataGrid control that contains dropdown lists.</summary><remarks>
				<p>Use the <b>LiveDropDownListColumn</b> column type in a LiveDataGrid control to create a dropdown list that corresponds with each row in the LiveDataGrid control.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.#ctor">
            <summary>Initializes a new instance of LiveDropDownListColumn.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveDropDownListColumn.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>Resets the specified cell in the LiveDropDownListColumn to its initial state.</summary><remarks>
				<p>The <b>InitializeCell</b> method resets the specified cell in the LiveDropDownListColumn to its initial state.</p>
			</remarks><param name="cell">A TableCell object that represents the cell to reset.</param><param name="columnIndex">The column number where the cell is located.</param><param name="itemType">One of the ListItemType values.</param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.AutoPostback">
            <summary>Gets or sets a value indicating whether the dropdowns automatically post back to the server when checked.</summary><remarks>
				<p>Use this property to specify whether the state of the LiveDropDownListColumn is posted back to the server when clicked (via callback or postback, depending on the value of EnableCallback).</p>
			</remarks><value><b>true</b> to automatically post to the server; otherwise, <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.DataSource">
            <summary>Gets or sets the data source that populates the items of the list control.</summary><remarks>
				<p>Use this property to specify a source of data to populate a list control.</p>
				<p>The items in the <b>Items</b> collection are initialized from LiveDropDownListColumn.DataTextField and LiveDropDownListColumn.DataValueField.</p>
			</remarks><value>A data source that provides data for populating the list control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.DataTextField">
            <summary>Gets or sets the field of the data source that provides the text content of the list items.</summary><remarks>
				<p>Use this property to specify a field in the LiveDropDownListColumn.DataSource to display as the items of the list in a list control.</p>
			</remarks><value>A System.String that specifies the field of the data source that provides the text content of the list items. The default is String.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.DataTextFormatString">
            <summary>Gets or sets the formatting string used to control how data bound to the list control is displayed.</summary><remarks>
				<p>Use the <b>DataTextFormatString</b> property to provide a custom display format for the caption of the command buttons in the column.</p>
				<p>The data format string consists of two parts, separated by a colon, in the form { A: Bxx }. For example, the formatting string {0:F2} would format the cell to display a fixed point number with two decimal places.</p>
				<p>
					<b>   Note</b>   The entire string must be enclosed in braces to indicate that it is a format string and not a literal string. Any text outside the braces is displayed as literal text.</p>
				<p>The value before the colon (A in the general example) specifies the parameter index in a zero-based list of parameters.</p>
				<p>
					<b>   Note</b>   This value can only be set to <b>0</b> because there is only one value in each cell.</p>
				<p>The character after the colon (B in the general example) specifies the format to display the value in. The following table lists the common formats.</p>
				<div class="tablediv"><table cellspacing="0" class="dtTABLE">
						<TR VALIGN="top">
							<TH width="50%">Format Character</TH>
							<TH width="50%">Description</TH>
						</TR><TR><TD><STRONG>C</STRONG></TD><TD>Displays numeric values in currency format.</TD></TR><TR><TD><STRONG>D</STRONG></TD><TD>Displays numeric values in decimal format.</TD></TR><TR><TD><STRONG>E</STRONG></TD><TD>Displays numeric values in scientific (exponential) format.</TD></TR><TR><TD><STRONG>F</STRONG></TD><TD>Displays numeric values in fixed format.</TD></TR><TR><TD><STRONG>G</STRONG></TD><TD>Displays numeric values in general format.</TD></TR><TR><TD><STRONG>N</STRONG></TD><TD>Displays numeric values in number format.</TD></TR><TR><TD><STRONG>X</STRONG></TD><TD>Displays numeric values in hexadecimal format.</TD></TR></table></div>
				<p>
					<b>   Note</b>   The format character is not case-sensitive, except for <b>X</b>, which displays the hexadecimal characters in the case specified.</p>
				<p>The value after the format character (xx in the general example) specifies the number of significant digits or decimal places to display.</p>
				<p>The following table contains examples of formatting strings and the results. It assumes standard English settings.</p>
				<div class="tablediv"><table cellspacing="0" class="dtTABLE">
						<TR VALIGN="top">
							<TH width="33%">Numeric Value</TH>
							<TH width="33%">Format String</TH>
							<TH width="33%">Result</TH>
						</TR><TR><TD>12345.6789</TD><TD>"{0:C}"</TD><TD>$12,345.68</TD></TR><TR><TD>-12345.6789</TD><TD>"{0:C}"</TD><TD>($12,345.68)</TD></TR><TR><TD>12345</TD><TD>"{0:D}"</TD><TD>12345</TD></TR><TR><TD>12345</TD><TD>"{0:D8}"</TD><TD>00012345</TD></TR><TR><TD>12345.6789</TD><TD>"{0:E}"</TD><TD>1234568E+004</TD></TR><TR><TD>12345.6789</TD><TD>"{0:E10}"</TD><TD>1.2345678900E+004</TD></TR><TR><TD>12345.6789</TD><TD>"{0:F}"</TD><TD>12345.68</TD></TR><TR><TD>12345.6789</TD><TD>"{0:F0}"</TD><TD>12346</TD></TR><TR><TD>12345.6789</TD><TD>"{0:G}"</TD><TD>12345.6789</TD></TR><TR><TD>123456789</TD><TD>"{0:G7}"</TD><TD>1.234568E8</TD></TR><TR><TD>12345.6789</TD><TD>"{0:N}"</TD><TD>12,345.68</TD></TR><TR><TD>123456789</TD><TD>"{0:N4}"</TD><TD>123,456,789.0000</TD></TR><TR><TD>12345.6789</TD><TD>"Total: {0:C}"</TD><TD>Total: $12345.68</TD></TR></table></div>
				<p>For more information on formatting strings, see Formatting Overview.</p>
			</remarks><value>The formatting string for data bound to the control. The default value is String.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.DataValueField">
            <summary>Gets or sets the field of the data source that provides the value of each list item.</summary><remarks>
				<p>Use this property to specify the field that contains the value of each item in a list control.</p>
			</remarks><value>A System.String that specifies the field of the data source that provides the value of each list item. The default is String.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveDropDownListColumn.DataMember">
            <summary>
			Gets or sets the specific table in the DataSource to bind to the LiveDropDownListColumn.
			</summary><remarks>
			If the DataSource contains more than one table, use this property to specify the exact table to bind to the LiveDropDownListColumn.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveEditCommandColumn">
            <summary>A special column type for the LiveDataGrid control that contains the <b>Edit</b> command buttons for editing data items in each row.</summary><remarks>
				<p>Use the <b>LiveEditCommandColumn</b> class to create a special column for the LiveDataGrid control that contains the <b>Edit</b>, <b>Update</b>, and <b>Cancel</b> command buttons for each data row in the grid. These buttons allow you to edit the values of a row in the LiveDataGrid control.</p>
				<p>If no row is selected, an <b>Edit</b> command button displays in the <b>LiveEditCommandColumn</b> for each data row in the LiveDataGrid control. When the <b>Edit</b> button for an item is clicked, the <b>EditCommand</b> event is raised and the <b>Edit</b> button is replaced with the <b>Update</b> and <b>Cancel</b> command buttons. You need to provide code to handle this event. A typical event handler sets the EditItemIndex property to the selected row and then rebinds the data to the LiveDataGrid control.</p>
				<p>
					<b>   Note</b>   You must provide values for the CancelText, EditText, and UpdateText properties. Otherwise, the associated command buttons will not appear in the <b>LiveEditCommandColumn</b>.</p>
				<p>The buttons in the <b>LiveEditCommandColumn</b> can be set to display as hyperlinks or push buttons by setting the ButtonType property.</p>
				<p>Clicking the <b>Update</b> or <b>Cancel</b> command button raises the <b>UpdateCommand</b> or <b>CancelCommand event</b>, respectively. You need to provide code to handle these events.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveEditCommandColumn.#ctor">
            <summary>Initializes a new instance of LiveEditCommandColumn.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveEditCommandColumn.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveEditCommandColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>Resets the specified cell in the LiveEditCommandColumn to its initial state.</summary><remarks>
				<p>The <b>InitializeCell</b> method resets the specified cell in the LiveEditCommandColumn to its initial state.</p>
			</remarks><param name="cell">A TableCell object that represents the cell to reset.</param><param name="columnIndex">The column number where the cell is located.</param><param name="itemType">One of the ListItemType values.</param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveEditCommandColumn.ButtonType">
            <summary>
			Gets or sets the button type for the column.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsEditCommandColumnButtonTypeTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.EditCommandColumn.ButtonType&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveEditCommandColumn.CancelText">
            <summary>
			Gets or sets the text to display for the Cancel command button in the EditCommandColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsEditCommandColumnCancelTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.EditCommandColumn.CancelText&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveEditCommandColumn.EditText">
            <summary>
			Gets or sets the text to display for the Edit command button in the EditCommandColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsEditCommandColumnEditTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.EditCommandColumn.EditText&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveEditCommandColumn.UpdateText">
            <summary>
			Gets or sets the text to display for the Update command button in the EditCommandColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsEditCommandColumnUpdateTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.EditCommandColumn.UpdateText&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveHyperLink">
            <summary>A control that displays a link to another Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.#ctor">
            <summary>Initializes a new instance of LiveHyperLink.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>		
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLink.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Text">
            <summary>Gets or sets the text caption for the LiveHyperLink control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkClassTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkClass.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Target">
            <summary>Gets or sets the target window or frame to display the Web page content linked to when the LiveHyperLink control is clicked.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkClassTargetTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkClass.Target&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.ImageUrl">
            <summary>Gets or sets the path to an image to display for the LiveHyperLink control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkClassImageUrlTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkClass.ImageUrl&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.NavigateUrl">
            <summary>Gets or sets the URL to link to when the LiveHyperLink control is clicked.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkClassNavigateUrlTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkClass.NavigateUrl&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLink.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.Click">
            <summary>Occurs when the LiveHyperLink control is clicked.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkClassClickTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkClass.Click&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveHyperLink.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn">
            <summary>
			A column type for the DataGrid control that contains a hyperlink for each item in the column.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.#ctor">
            <summary>
			Initializes a new instance of the HyperLinkColumn class.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn Constructor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.FormatDataNavigateUrlValue(System.Object)">
            <summary>
            
            </summary>
            <param name="dataUrlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.FormatDataTextValue(System.Object)">
            <summary>
            
            </summary>
            <param name="dataTextValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.Initialize">
            <summary>
			This member overrides DataGridColumn.Initialize.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnInitializeTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.Initialize&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
			This member overrides DataGridColumn.InitializeCell.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnInitializeCellTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.InitializeCell&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.DataNavigateUrlField">
            <summary>
			Gets or sets the field from a data source to bind to the URL of the hyperlinks in the HyperLinkColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnDataNavigateUrlFieldTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.DataNavigateUrlField&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.DataNavigateUrlFormatString">
            <summary>
			Gets or sets the display format for the URL of the hyperlinks in the HyperLinkColumn when the URL is data-bound to a field in a data source.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumn.DataNavigateUrlFormatStringTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.DataNavigateUrlFormatString&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.DataTextField">
            <summary>
			Gets or sets the field from a data source to bind to the text caption of the hyperlinks in the HyperLinkColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnDataTextFieldTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.DataTextField&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.DataTextFormatString">
            <summary>
			Gets or sets the display format for the text caption of the hyperlinks in the HyperLinkColumn column.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnDataTextFormatStringTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.DataTextFormatString&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.NavigateUrl">
            <summary>
			Gets or sets the URL to link to when a hyperlink in the column is clicked.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnNavigateUrlTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.NavigateUrl&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.Target">
            <summary>
			Gets or sets the target window or frame to display the Web page content linked to when the hyperlink in the column is clicked.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnTargetTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.Target&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveHyperLinkColumn.Text">
            <summary>
			Gets or sets the text caption to display for the hyperlinks in the column.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsHyperLinkColumnTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.HyperLinkColumn.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveImage">
            <summary>Displays an image on a Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClass&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic"> 
'In this example, items are added to a Live List control from a database
'The items are images to be displayed in a LiveImage
'When one of the items is selected, the corresponding image is displayed
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(DataSet, "images")

    'Bind the database to the Live List
    LiveList1.DataSource = DataSet
    LiveList1.DataMember = "images"
    LiveList1.DataTextField = "filename"
    LiveList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveList1.SelectedIndex = 0
    LiveList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles     LiveList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control from a database
//The items are images to be displayed in a LiveImage
//When one of the items is selected, the corresponding image is displayed
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveList1.DataSource = dataSet;
	LiveList1.DataMember = "images";
	LiveList1.DataTextField = "filename";
	LiveList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveList1.SelectedIndex = 0;
	LiveList1_SelectedIndexChanged(this, null);
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text;
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.#ctor">
            <summary>Initializes a new instance of LiveImage.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImage.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.AlternateText">
            <summary>Gets or sets the alternate text displayed in the LiveImage control when the image is unavailable. Browsers that support the ToolTips feature display this text as a WebControl.ToolTip.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassAlternateTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClass.AlternateText&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic"> 
'In this example, items are added to a Live List control from a database
'The items are images to be displayed in a LiveImage
'When one of the items is selected, the corresponding image is displayed
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(DataSet, "images")

    'Bind the database to the Live List
    LiveList1.DataSource = DataSet
    LiveList1.DataMember = "images"
    LiveList1.DataTextField = "filename"
    LiveList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveList1.SelectedIndex = 0
    LiveList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles     LiveList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control from a database
//The items are images to be displayed in a LiveImage
//When one of the items is selected, the corresponding image is displayed
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveList1.DataSource = dataSet;
	LiveList1.DataMember = "images";
	LiveList1.DataTextField = "filename";
	LiveList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveList1.SelectedIndex = 0;
	LiveList1_SelectedIndexChanged(this, null);
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.ImageAlign">
            <summary>Gets or sets the alignment of the LiveImage control in relation to other elements on the Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassImageAlignTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClass.ImageAlign&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.ImageUrl">
            <summary>Gets or sets the location of an image to display in the LiveImage control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassImageUrlTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClass.ImageUrl&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic"> 
'In this example, items are added to a Live List control from a database
'The items are images to be displayed in a LiveImage
'When one of the items is selected, the corresponding image is displayed
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(DataSet, "images")

    'Bind the database to the Live List
    LiveList1.DataSource = DataSet
    LiveList1.DataMember = "images"
    LiveList1.DataTextField = "filename"
    LiveList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveList1.SelectedIndex = 0
    LiveList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles     LiveList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control from a database
//The items are images to be displayed in a LiveImage
//When one of the items is selected, the corresponding image is displayed
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveList1.DataSource = dataSet;
	LiveList1.DataMember = "images";
	LiveList1.DataTextField = "filename";
	LiveList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveList1.SelectedIndex = 0;
	LiveList1_SelectedIndexChanged(this, null);
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveList1.SelectedItem.Text;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImage.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImage.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveImageButton">
            <summary>A control that displays an image and responds to mouse clicks on the image.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageButtonClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageButtonClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.#ctor">
            <summary>Initializes a new instance of LiveImageButton.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageButtonClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageButtonClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveImageButton.OnClick(System.Web.UI.ImageClickEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveImageButton.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.AlternateText">
            <summary>Gets or sets the alternate text displayed in the LiveImage control when the image is unavailable. Browsers that support the ToolTips feature display this text as a WebControl.ToolTip.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassAlternateTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClass.AlternateText&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.ImageAlign">
            <summary>Gets or sets the alignment of the LiveImage control in relation to other elements on the Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassImageAlignTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClass.ImageAlign&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveImageButton.ImageUrl">
            <summary>Gets or sets the location of an image to display in the LiveImage control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsImageClassImageUrlTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ImageClass.ImageUrl&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveLabel">
            <summary>Represents a label control, which displays text on a Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsLabelClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.LabelClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.#ctor">
            <summary>Initializes a new instance of LiveLabel.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsLabelClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.LabelClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveLabel.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Text">
            <summary>Gets or sets the text content of the LiveLabel control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsLabelClassTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.LabelClass.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control dynamically, as well as updating a LiveLabel control.

<code lang="Visual Basic"> 
'In this example, items are added to a Live List control dynamically
'The items are simply reflections of when they were added
'When one of the items is selected, a LiveLabel is updated
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Add items dynamically in code to a list control
    'When the LiveButton is pressed, a new item is added to the list
    LiveList1.Items.Add(DateTime.Now.ToString())
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'A LiveLabel is updated whenever an item is selected from the list
    LiveLabel1.Text = "This item was added at " + LiveList1.Items(LiveList1.SelectedIndex).ToString()
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control dynamically
//The items are simply reflections of when they were added
//When one of the items is selected, a LiveLabel is updated
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Add items dynamically in code to a list control
	//When the LiveButton is pressed, a new item is added to the list
	LiveList1.Items.Add(DateTime.Now.ToString());
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//A LiveLabel is updated whenever an item is selected from the list
	LiveLabel1.Text = "This item was added at " + LiveList1.Items[LiveList1.SelectedIndex];
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveLabel.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveLabel.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:LiveLicenseProvider">
            <summary>
            Summary description for TcpLicenseProvider.
            </summary>
        </member>
        <member name="T:PowerTcpLicenseProvider">
            <summary>
            Base class for all PowerTCP classes
            </summary>
        </member>
        <member name="M:PowerTcpLicenseProvider.GetKeyValue(System.String)">
            <summary>
            This method checks CurrentUser first and LocalMachine seconds, looking for the string value for "name"
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveListBox">
            <summary>Represents a list box control that allows single or multiple item selection.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListBoxClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListBoxClass&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates different ways of adding items to a Live List control.

<code lang="Visual Basic">
'In the following examples, items are added to all four types of Live List controls
'These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
'Each Live List control can be interchanged with another

'Add items using an ArrayList, and show a LiveMessageBox when an item is selected

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveRadioButtonList1.DataSource = arrayItems
    LiveRadioButtonList1.DataBind()
End Sub

Private Sub LiveRadioButtonList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveRadioButtonList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveRadioButtonList1.SelectedIndex)
    Case 0
        LiveMessageBox1.Show("You have selected 'Alert'", DialogType.Alert)
        Case 1
        LiveMessageBox1.Show("You have selected 'Confirm'", DialogType.Confirm)
        Case 2
        LiveMessageBox1.Show("You have selected 'Prompt'", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then
        If (e.Confirmed) Then
        LiveTextBox1.Text = "The OK button was pressed"
        Else
        LiveTextBox1.Text = "The Cancel button was pressed"
        End If

        'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
        LiveTextBox1.Text = "The Prompt was cancelled"
        Else
        LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub


'Add items dynamically, when a LiveButton is pressed

Private Sub LiveButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton2.Click
    'Add items dynamically in code to a list control
    'When the LiveButton is pressed, a new item is added to the list
    LiveListBox1.Items.Add(DateTime.Now.ToString())
End Sub

Private Sub LiveListBox1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveListBox1.SelectedIndexChanged
    'A LiveLabel is updated whenever an item is selected from the list
    LiveLabel1.Text = "This item was added at " + LiveListBox1.Items(LiveListBox1.SelectedIndex).ToString()
End Sub


'Add items from a database, and display an image when an item is selected

Private Sub LiveButton3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton3.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(dataSet, "images")

    'Bind the database to the Live List
    LiveDropDownList1.DataSource = dataSet
    LiveDropDownList1.DataMember = "images"
    LiveDropDownList1.DataTextField = "filename"
    LiveDropDownList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveDropDownList1.SelectedIndex = 0
    LiveDropDownList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveDropDownList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveDropDownList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text
End Sub


'Add items to the Items.Collection and play a sound when an item is selected

Private Sub LiveButton4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton4.Click
    'Add items to the Live list control via the ListItemCollection
    LiveCheckBoxList1.Items.Add("chord.wav")
    LiveCheckBoxList1.Items.Add("chimes.wav")
    LiveCheckBoxList1.Items.Add("exclamation.wav")
    LiveCheckBoxList1.Items.Add("error.wav")
End Sub

Private Sub LiveCheckBoxList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveCheckBoxList1.SelectedIndexChanged
    'When an item in the LiveCheckBoxList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveCheckBoxList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items(LiveCheckBoxList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In the following examples, items are added to all four types of Live List controls
//These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
//Each Live List control can be interchanged with another

//Add items using an ArrayList, and show a LiveMessageBox when an item is selected

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveRadioButtonList1.DataSource = arrayItems;
	LiveRadioButtonList1.DataBind();
}

private void LiveRadioButtonList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveRadioButtonList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

//Add items dynamically, when a LiveButton is pressed

private void LiveButton2_Click(object sender, System.EventArgs e)
{
	//Add items dynamically in code to a list control
	//When the LiveButton is pressed, a new item is added to the list
	LiveListBox1.Items.Add(DateTime.Now.ToString());
}

private void LiveListBox1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//A LiveLabel is updated whenever an item is selected from the list
	LiveLabel1.Text = "This item was added at " + LiveListBox1.Items[LiveListBox1.SelectedIndex];
}


//Add items from a database, and display an image when an item is selected

private void LiveButton3_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveDropDownList1.DataSource = dataSet;
	LiveDropDownList1.DataMember = "images";
	LiveDropDownList1.DataTextField = "filename";
	LiveDropDownList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveDropDownList1.SelectedIndex = 0;
	LiveDropDownList1_SelectedIndexChanged(this, null);
}

private void LiveDropDownList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text;
}

//Add items to the Items.Collection and play a sound when an item is selected
		
private void LiveButton4_Click(object sender, System.EventArgs e)
{
	//Add items to the Live list control via the ListItemCollection
	LiveCheckBoxList1.Items.Add("chord.wav");
	LiveCheckBoxList1.Items.Add("chimes.wav");
	LiveCheckBoxList1.Items.Add("exclamation.wav");
	LiveCheckBoxList1.Items.Add("error.wav");
}

private void LiveCheckBoxList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the LiveCheckBoxList is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveCheckBoxList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items[LiveCheckBoxList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.#ctor">
            <summary>Initializes a new instance of LiveListBox.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListBoxClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListBoxClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveListBox.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.AutoPostBack">
            <summary>Gets or sets a value indicating whether a postback (or callback) to the server automatically occurs when the user changes the PowerWEB control's list selection or checked state.</summary><remarks>
				<p>For Live List Controls, set this property to true if the server needs to capture the change as soon as it is made. For example, other controls on the Web page can be automatically filled depending on the user's selection from the list control. This property can be used to allow automatic population of other controls on the Web page based on a user's selection from the list.</p>
				<p>For LiveCheckBox and LiveRadioButton, use this property to specify whether the state of the PowerWEB control is posted back to the server when clicked.</p>
				<p><b>   Note</b>   When <b>AutoPostBack</b> is <b>true</b> and EnableCallback is <b>true</b>, the PowerWEB control will perform automatic callbacks.  If EnableCallback is <b>false</b>, traditional postbacks will occur.</p>
			</remarks><value><b>true</b> whenever the user changes the text in the text box and then tabs out of the control; otherwise, <b>false</b>. The default is <b>true</b>, which is different than the non-<i>Live</i> TextBox.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.SelectedIndex">
            <summary>Gets or sets the lowest ordinal index of the selected items in the list.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListControlClassSelectedIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListControlClass.SelectedIndex&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control dynamically, as well as updating a LiveLabel control.

<code lang="Visual Basic"> 
'In this example, items are added to a Live List control dynamically
'The items are simply reflections of when they were added
'When one of the items is selected, a LiveLabel is updated
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Add items dynamically in code to a list control
    'When the LiveButton is pressed, a new item is added to the list
    LiveList1.Items.Add(DateTime.Now.ToString())
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'A LiveLabel is updated whenever an item is selected from the list
    LiveLabel1.Text = "This item was added at " + LiveList1.Items(LiveList1.SelectedIndex).ToString()
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control dynamically
//The items are simply reflections of when they were added
//When one of the items is selected, a LiveLabel is updated
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Add items dynamically in code to a list control
	//When the LiveButton is pressed, a new item is added to the list
	LiveList1.Items.Add(DateTime.Now.ToString());
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//A LiveLabel is updated whenever an item is selected from the list
	LiveLabel1.Text = "This item was added at " + LiveList1.Items[LiveList1.SelectedIndex];
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Rows">
            <summary><b>Obsolete</b>. Gets the number of rows displayed in the LiveListBox control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListBoxClassRowsTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListBoxClass.Rows&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.SelectionMode">
            <summary>Gets or sets the selection mode of the LiveListBox control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListBoxClassSelectionModeTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListBoxClass.SelectionMode&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveListBox.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveListBox.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveMarshal">
            <summary>
            The LiveMarshal class marshals between LiveControls in different namespaces. 
            because Dart.PowerWEB.LiveControls.ILiveControl != Dart.PowerWEB.Zoom.ILiveControl
            
            
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveMessageBox">
            <summary>Displays a message box that can inform or prompt the user.</summary><remarks>
				<p>Use LiveMessageBox.Show to inform the user, ask the user for confirmation, or prompt the user for information.</p>
				<p>A LiveMessageBox.Response event will fire after the user has responded to a DialogType.Confirm or DialogType.Prompt <b>LiveMessageBox</b>.</p>
			</remarks>
            <example>
The following example demonstrates using a LiveMessageBox in combination with a Live List control.

<code lang="Visual Basic">
'In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
'The items include different LiveMessageBox Dialog Types
'When one of the Types is selected in the List, the MessageBox is shown
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveList1.DataSource = arrayItems
    LiveList1.DataBind()
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveList1.SelectedIndex)
        Case 0
            LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert)
        Case 1
            LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm)
        Case 2
            LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then

        If (e.Confirmed) Then
            LiveTextBox1.Text = "The OK button was pressed!"
        Else
            LiveTextBox1.Text = "The Cancel button was pressed!"
        End If

    'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
            LiveTextBox1.Text = "The Prompt was cancelled!"
        Else
            LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
//The items include different LiveMessageBox Dialog Types
//When one of the Types is selected in the List, the MessageBox is shown
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveList1.DataSource = arrayItems;
	LiveList1.DataBind();
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.#ctor">
            <summary>Initializes a new instance of LiveMessageBox.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveMessageBox.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.Show(System.String,Dart.PowerWEB.LiveControls.DialogType)">
            <summary>Shows a JavaScript message box.</summary><remarks>
				<p>Shows one of three JavaScript message boxes, as specified by the <b>DialogType</b> parameter.</p>
				<p>The options are <b>Alert</b>, <b>Confirm</b> and <b>Prompt</b>.  For <b>Confirm</b> and <b>Prompt</b> types, a <b>Response</b> event will fire when the response is returned.</p>
			</remarks><param name="text">The text to show in the message box.</param><param name="dialogType">The type of JavaScript message box to show.</param>
            <example>
The following example demonstrates using a LiveMessageBox in combination with a Live List control.

<code lang="Visual Basic">
'In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
'The items include different LiveMessageBox Dialog Types
'When one of the Types is selected in the List, the MessageBox is shown
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveList1.DataSource = arrayItems
    LiveList1.DataBind()
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveList1.SelectedIndex)
        Case 0
            LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert)
        Case 1
            LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm)
        Case 2
            LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then

        If (e.Confirmed) Then
            LiveTextBox1.Text = "The OK button was pressed!"
        Else
            LiveTextBox1.Text = "The Cancel button was pressed!"
        End If

    'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
            LiveTextBox1.Text = "The Prompt was cancelled!"
        Else
            LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
//The items include different LiveMessageBox Dialog Types
//When one of the Types is selected in the List, the MessageBox is shown
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveList1.DataSource = arrayItems;
	LiveList1.DataBind();
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveMessageBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveMessageBox.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveMessageBox.Response">
            <summary>Occurs when a response is returned from a LiveMessageBox of type DialogType.Prompt or DialogType.Confirm.</summary><remarks>
				<p>The <b>Response</b> event fires when a response is returned from a LiveMessageBox of type DialogType.Prompt or DialogType.Confirm.</p>
			</remarks>
            <example>
The following example demonstrates using a LiveMessageBox in combination with a Live List control.

<code lang="Visual Basic">
'In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
'The items include different LiveMessageBox Dialog Types
'When one of the Types is selected in the List, the MessageBox is shown
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveList1.DataSource = arrayItems
    LiveList1.DataBind()
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveList1.SelectedIndex)
        Case 0
            LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert)
        Case 1
            LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm)
        Case 2
            LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then

        If (e.Confirmed) Then
            LiveTextBox1.Text = "The OK button was pressed!"
        Else
            LiveTextBox1.Text = "The Cancel button was pressed!"
        End If

    'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
            LiveTextBox1.Text = "The Prompt was cancelled!"
        Else
            LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
//The items include different LiveMessageBox Dialog Types
//When one of the Types is selected in the List, the MessageBox is shown
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveList1.DataSource = arrayItems;
	LiveList1.DataBind();
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.ResponseEventArgs">
            <summary>Provides data for a LiveMessageBox of type DialogType.Prompt or DialogType.Confirm.</summary><remarks>
				<p>This class passes the response to a LiveMessageBox. You can then use event handlers to programmatically respond to the event based on the value of these arguments.</p>
				<p>Raising an event invokes the event handler through a delegate. For more information, see Raising an Event.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ResponseEventArgs.#ctor">
            <summary>Initializes a new instance of ResponseEventArgs.</summary><remarks>
				<p>The default constructor initializes a new instance of ResponseEventArgs.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ResponseEventArgs.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of ResponseEventArgs.</summary><remarks>
				<p>The constructor initializes a new instance of ResponseEventArgs with a response string.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ResponseEventArgs.DialogType">
            <summary>Gets or sets the confirmed state of a LiveMessageBox.</summary><remarks>
				<p>Use this property to determine if a response is confirmed.</p>
			</remarks><value><b>true</b> for a confirmed response, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ResponseEventArgs.Confirmed">
            <summary>Gets or sets the confirmed state of a LiveMessageBox.</summary><remarks>
				<p>Use this property to determine if a response is confirmed.</p>
			</remarks><value><b>true</b> for a confirmed response, otherwise <b>false</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ResponseEventArgs.Text">
            <summary>Gets or sets the response message of a LiveMessageBox.</summary><remarks>
				<p>Use this property to determine the response message of a LiveMessageBox.</p>
			</remarks><value>The message after a LiveMessageBox is responded to.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.ResponseEventHandler">
            <summary>The delegate for the Response event.</summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LivePanel">
            <summary>Represents a control that acts as a container for other controls.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsPanelClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.PanelClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.#ctor">
            <summary>Initializes a new instance of LivePanel.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsPanelClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.PanelClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.CreateControlStyle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePanel.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.BackImageUrl">
            <summary>Gets or sets the URL of the background image for the LivePanel control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsPanelClassBackImageUrlTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.PanelClassBackImageUrl&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.HorizontalAlign">
            <summary>Gets or sets the horizontal alignment of the contents within the LivePanel.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsPanelClassHorizontalAlignTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.PanelClassHorizontalAlign&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Wrap">
            <summary>Gets or sets a value indicating whether the content wraps within the LivePanel.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsPanelClassWrapTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.PanelClassWrap&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePanel.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LivePanel.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LivePlaceHolder">
            <summary>A container to store dynamically added server controls on the Web page.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsPlaceHolderClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.PlaceHolderClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.#ctor">
            <summary>Initializes a new instance of LivePlaceHolder.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsPlaceHolderClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.PlaceHolderClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LivePlaceHolder.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePlaceHolder.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePlaceHolder.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePlaceHolder.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePlaceHolder.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePlaceHolder.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePlaceHolder.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LivePlaceHolder.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveRadioButton">
            <summary>Represents a radio button control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.#ctor">
            <summary>Initializes a new instance of LiveRadioButton.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButton.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButton.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.AutoPostBack">
            <summary>Gets or sets a value indicating whether a postback (or callback) to the server automatically occurs when the user changes the PowerWEB control's list selection or checked state.</summary><remarks>
				<p>For Live List Controls, set this property to true if the server needs to capture the change as soon as it is made. For example, other controls on the Web page can be automatically filled depending on the user's selection from the list control. This property can be used to allow automatic population of other controls on the Web page based on a user's selection from the list.</p>
				<p>For LiveCheckBox and LiveRadioButton, use this property to specify whether the state of the PowerWEB control is posted back to the server when clicked.</p>
				<p><b>   Note</b>   When <b>AutoPostBack</b> is <b>true</b> and EnableCallback is <b>true</b>, the PowerWEB control will perform automatic callbacks.  If EnableCallback is <b>false</b>, traditional postbacks will occur.</p>
			</remarks><value><b>true</b> whenever the user changes the text in the text box and then tabs out of the control; otherwise, <b>false</b>. The default is <b>true</b>, which is different than the non-<i>Live</i> TextBox.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Text">
            <summary>Gets or sets the text label associated with the LiveRadioButton.</summary><remarks>
				<p>Use this property to specify the text label associated with the LiveRadioButton control. This property can also be used to programmatically get the text label associated with the LiveRadioButton control.</p>
			</remarks><value>The text label associated with the LiveRadioButton. The default value is String.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.TextAlign">
            <summary>Gets or sets the alignment of the text label associated with the LiveRadioButton control.</summary><remarks>
				<p>Use this property to specify the alignment of the text label associated with the LiveRadioButton control. You can specify whether the text label appears to the right or left of the radio button. Use the LiveRadioButton.Text property to specify the label text.</p>
			</remarks><value>One of the TextAlign values. The default value is <b>Right</b>.</value><exception cref="T:System.ArgumentException">The specified value is not one of the TextAlign values.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButton.Checked">
            <summary>Gets or sets a value indicating whether the LiveRadioButton control is checked.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWindowsFormsRadioButtonClassCheckedTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Windows.Forms.RadioButtonClass.Checked&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn">
            <summary>A column type for the LiveDataGrid control that contains radio buttons.</summary><remarks>
				<p>Use the <b>LiveRadioButtonColumn</b> column type in a LiveDataGrid control to create a radio button that corresponds with each row in the LiveDataGrid control.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn.#ctor">
            <summary>Initializes a new instance of LiveRadioButtonColumn.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveRadioButtonColumn.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>Resets the specified cell in the LiveRadioButtonColumn to its initial state.</summary><remarks>
				<p>The <b>InitializeCell</b> method resets the specified cell in the LiveRadioButtonColumn to its initial state.</p>
			</remarks><param name="cell">A TableCell object that represents the cell to reset.</param><param name="columnIndex">The column number where the cell is located.</param><param name="itemType">One of the ListItemType values.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn.Initialize">
            <summary>
			Resets the LiveRadioButtonColumn to its initial state.
			</summary><remarks>
			Use the Initialize method to reset the LiveRadioButtonColumn to its initial state.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn.FormatDataTextValue(System.Object)">
            <summary>
            
            </summary>
            <param name="dataTextValue"></param>
            <returns></returns>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn.AutoPostback">
            <summary>Gets or sets a value indicating whether the radio buttons automatically post back to the server when checked.</summary><remarks>
				<p>Use this property to specify whether the state of the LiveRadioButtonColumn is posted back to the server when clicked (via callback or postback, depending on the value of EnableCallback).</p>
			</remarks><value><b>true</b> to automatically post to the server; otherwise, <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn.SelectedIndex">
            <summary>Gets or sets the lowest ordinal index of the selected items in the list.</summary><remarks>
				<p>Use this property to determine the index of the currently selected item in the list if the list control allows only one selection. If the list control supports multiple selections, use this property to determine the lowest index of the selected items.</p>
			</remarks><value>The lowest ordinal index of the selected items in the list. The default is -1, which indicates that nothing is selected.</value><exception cref="T:System.ArgumentOutOfRangeException">The index was set to less than -1, or greater than or equal to the number of items on the list.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonColumn.DataField">
            <summary>
			Gets or sets the field name from the data source to bind to the LiveCheckBoxColumn.
			</summary><remarks>
			Use the <b>DataField</b> property to specify the field to bind to the LiveCheckBoxColumn.
			</remarks><value>
			The name of the field to bind to the LiveCheckBoxColumn. The default value is String.Empty.
			</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveRadioButtonList">
            <summary>Represents a list control that encapsulates a group of radio button controls.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonListClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonListClass&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates different ways of adding items to a Live List control.

<code lang="Visual Basic">
'In the following examples, items are added to all four types of Live List controls
'These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
'Each Live List control can be interchanged with another

'Add items using an ArrayList, and show a LiveMessageBox when an item is selected

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveRadioButtonList1.DataSource = arrayItems
    LiveRadioButtonList1.DataBind()
End Sub

Private Sub LiveRadioButtonList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveRadioButtonList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveRadioButtonList1.SelectedIndex)
    Case 0
        LiveMessageBox1.Show("You have selected 'Alert'", DialogType.Alert)
        Case 1
        LiveMessageBox1.Show("You have selected 'Confirm'", DialogType.Confirm)
        Case 2
        LiveMessageBox1.Show("You have selected 'Prompt'", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then
        If (e.Confirmed) Then
        LiveTextBox1.Text = "The OK button was pressed"
        Else
        LiveTextBox1.Text = "The Cancel button was pressed"
        End If

        'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
        LiveTextBox1.Text = "The Prompt was cancelled"
        Else
        LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub


'Add items dynamically, when a LiveButton is pressed

Private Sub LiveButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton2.Click
    'Add items dynamically in code to a list control
    'When the LiveButton is pressed, a new item is added to the list
    LiveListBox1.Items.Add(DateTime.Now.ToString())
End Sub

Private Sub LiveListBox1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveListBox1.SelectedIndexChanged
    'A LiveLabel is updated whenever an item is selected from the list
    LiveLabel1.Text = "This item was added at " + LiveListBox1.Items(LiveListBox1.SelectedIndex).ToString()
End Sub


'Add items from a database, and display an image when an item is selected

Private Sub LiveButton3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton3.Click
    'Make sure that System.Data.OleDb is used

    'Get Items from a Database "images.mdb" in the folder "database"
    'The table is called "Table1" and the column with the filenames is "filename"
    Dim connection As New OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"))
    Dim sql As String = "SELECT filename FROM Table1"
    Dim adapter As New OleDbDataAdapter(sql, connection)
    Dim dataSet As New DataSet("imagesDataSet")
    adapter.Fill(dataSet, "images")

    'Bind the database to the Live List
    LiveDropDownList1.DataSource = dataSet
    LiveDropDownList1.DataMember = "images"
    LiveDropDownList1.DataTextField = "filename"
    LiveDropDownList1.DataBind()

    'Set a starting image, and show it by executing the SelectedIndexChanged event handler
    LiveDropDownList1.SelectedIndex = 0
    LiveDropDownList1_SelectedIndexChanged(Me, Nothing)
End Sub

Private Sub LiveDropDownList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveDropDownList1.SelectedIndexChanged
    'The Live List has been populated with some image filenames
    'When a new item is selected in the list, the new image is displayed
    LiveImage1.AlternateText = "Could not display selected image."
    LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text
End Sub


'Add items to the Items.Collection and play a sound when an item is selected

Private Sub LiveButton4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton4.Click
    'Add items to the Live list control via the ListItemCollection
    LiveCheckBoxList1.Items.Add("chord.wav")
    LiveCheckBoxList1.Items.Add("chimes.wav")
    LiveCheckBoxList1.Items.Add("exclamation.wav")
    LiveCheckBoxList1.Items.Add("error.wav")
End Sub

Private Sub LiveCheckBoxList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveCheckBoxList1.SelectedIndexChanged
    'When an item in the LiveCheckBoxList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveCheckBoxList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items(LiveCheckBoxList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In the following examples, items are added to all four types of Live List controls
//These include the LiveListBox, LiveDropDownList, LiveRadioButtonList and LiveCheckBoxList
//Each Live List control can be interchanged with another

//Add items using an ArrayList, and show a LiveMessageBox when an item is selected

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveRadioButtonList1.DataSource = arrayItems;
	LiveRadioButtonList1.DataBind();
}

private void LiveRadioButtonList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveRadioButtonList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

//Add items dynamically, when a LiveButton is pressed

private void LiveButton2_Click(object sender, System.EventArgs e)
{
	//Add items dynamically in code to a list control
	//When the LiveButton is pressed, a new item is added to the list
	LiveListBox1.Items.Add(DateTime.Now.ToString());
}

private void LiveListBox1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//A LiveLabel is updated whenever an item is selected from the list
	LiveLabel1.Text = "This item was added at " + LiveListBox1.Items[LiveListBox1.SelectedIndex];
}


//Add items from a database, and display an image when an item is selected

private void LiveButton3_Click(object sender, System.EventArgs e)
{
	//Make sure that System.Data.OleDb is used

	//Get Items from a Database "images.mdb" in the folder "database"
	//The table is called "Table1" and the column with the filenames is "filename"
	OleDbConnection connection = new OleDbConnection("PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=" + Server.MapPath("database/images.mdb"));
	string sql = "SELECT filename FROM Table1";
	OleDbDataAdapter adapter = new OleDbDataAdapter(sql, connection);
	DataSet dataSet = new DataSet("imagesDataSet");
	adapter.Fill(dataSet, "images");
			
	//Bind the database to the Live List
	LiveDropDownList1.DataSource = dataSet;
	LiveDropDownList1.DataMember = "images";
	LiveDropDownList1.DataTextField = "filename";
	LiveDropDownList1.DataBind();

	//Set a starting image, and show it by executing the SelectedIndexChanged event handler
	LiveDropDownList1.SelectedIndex = 0;
	LiveDropDownList1_SelectedIndexChanged(this, null);
}

private void LiveDropDownList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//The Live List has been populated with some image filenames
	//When a new item is selected in the list, the new image is displayed
	LiveImage1.AlternateText = "Could not display selected image.";
	LiveImage1.ImageUrl = "images/" + LiveDropDownList1.SelectedItem.Text;
}

//Add items to the Items.Collection and play a sound when an item is selected
		
private void LiveButton4_Click(object sender, System.EventArgs e)
{
	//Add items to the Live list control via the ListItemCollection
	LiveCheckBoxList1.Items.Add("chord.wav");
	LiveCheckBoxList1.Items.Add("chimes.wav");
	LiveCheckBoxList1.Items.Add("exclamation.wav");
	LiveCheckBoxList1.Items.Add("error.wav");
}

private void LiveCheckBoxList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the LiveCheckBoxList is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveCheckBoxList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveCheckBoxList1.Items[LiveCheckBoxList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.#ctor">
            <summary>Initializes a new instance of LiveRadioButtonColumn.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveRadioButtonColumn.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.DataBind">
            <summary>Binds a data source to the invoked server control and all its child controls.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIControlClassDataBindTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.ControlClass.DataBind&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.SaveViewState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveRadioButtonList.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.AutoPostBack">
            <summary>Gets or sets a value indicating whether a postback (or callback) to the server automatically occurs when the user changes the PowerWEB control's list selection or checked state.</summary><remarks>
				<p>For Live List Controls, set this property to true if the server needs to capture the change as soon as it is made. For example, other controls on the Web page can be automatically filled depending on the user's selection from the list control. This property can be used to allow automatic population of other controls on the Web page based on a user's selection from the list.</p>
				<p>For LiveCheckBox and LiveRadioButton, use this property to specify whether the state of the PowerWEB control is posted back to the server when clicked.</p>
				<p><b>   Note</b>   When <b>AutoPostBack</b> is <b>true</b> and EnableCallback is <b>true</b>, the PowerWEB control will perform automatic callbacks.  If EnableCallback is <b>false</b>, traditional postbacks will occur.</p>
			</remarks><value><b>true</b> whenever the user changes the text in the text box and then tabs out of the control; otherwise, <b>false</b>. The default is <b>true</b>, which is different than the non-<i>Live</i> TextBox.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.SelectedIndex">
            <summary>Gets or sets the lowest ordinal index of the selected items in the list.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsListControlClassSelectedIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.ListControlClass.SelectedIndex&lt;z/MSHelp:link&gt;z.
			</remarks>
            <example>
The following example demonstrates using a LiveMessageBox in combination with a Live List control.

<code lang="Visual Basic">
'In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
'The items include different LiveMessageBox Dialog Types
'When one of the Types is selected in the List, the MessageBox is shown
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Create a new ArrayList with the items to add to the Live list control
    Dim arrayItems As New ArrayList()
    arrayItems.Add("Alert")
    arrayItems.Add("Confirm")
    arrayItems.Add("Prompt")

    'Set the data source to the ArrayList and bind it to the Live list control
    LiveList1.DataSource = arrayItems
    LiveList1.DataBind()
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When a type of MessageBox is selected from the list, show it 
    Select Case (LiveList1.SelectedIndex)
        Case 0
            LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert)
        Case 1
            LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm)
        Case 2
            LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt)
        Case Else
    End Select
End Sub

Private Sub LiveMessageBox1_Response(ByVal sender As Object, ByVal e As ResponseEventArgs) Handles LiveMessageBox1.Response
    'After Confirm and Prompt MessageBoxes are shown, the Response event will fire

    'If it is a Confirm box, indicate which button was pressed in a LiveTextBox
    If (e.DialogType = DialogType.Confirm) Then

        If (e.Confirmed) Then
            LiveTextBox1.Text = "The OK button was pressed!"
        Else
            LiveTextBox1.Text = "The Cancel button was pressed!"
        End If

    'If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
    ElseIf (e.DialogType = DialogType.Prompt) Then
        If (Not e.Confirmed) Then
            LiveTextBox1.Text = "The Prompt was cancelled!"
        Else
            LiveTextBox1.Text = "The inputted data was: " + e.Text
        End If
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List control using an ArrayList when a LiveButton is pressed
//The items include different LiveMessageBox Dialog Types
//When one of the Types is selected in the List, the MessageBox is shown
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Create a new ArrayList with the items to add to the Live list control
	ArrayList arrayItems = new ArrayList();
	arrayItems.Add("Alert");
	arrayItems.Add("Confirm");
	arrayItems.Add("Prompt");

	//Set the data source to the ArrayList and bind it to the Live list control
	LiveList1.DataSource = arrayItems;
	LiveList1.DataBind();
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When a type of MessageBox is selected from the list, show it 
	switch (LiveList1.SelectedIndex)
	{
		case 0:
			LiveMessageBox1.Show("You have selected 'Alert'!", DialogType.Alert);
			break;
		case 1:
			LiveMessageBox1.Show("You have selected 'Confirm'!", DialogType.Confirm);
			break;
		case 2:
			LiveMessageBox1.Show("You have selected 'Prompt'!", DialogType.Prompt);
			break;
		default:
			break;
	}
}

private void LiveMessageBox1_Response(object sender, ResponseEventArgs e)
{
	//After Confirm and Prompt MessageBoxes are shown, the Response event will fire

	//If it is a Confirm box, indicate which button was pressed in a LiveTextBox
	if (e.DialogType == DialogType.Confirm)
	{
		if (e.Confirmed)
			LiveTextBox1.Text = "The OK button was pressed!";
		else
			LiveTextBox1.Text = "The Cancel button was pressed!";
	}
	//If it is a Prompt box, show the input data (or indicate the prompt was cancelled) in a LiveTextBox
	else if (e.DialogType == DialogType.Prompt)
	{
		if (!e.Confirmed)
			LiveTextBox1.Text = "The Prompt was cancelled!";
		else
			LiveTextBox1.Text = "The inputted data was: " + e.Text;	
	}
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.CellPadding">
            <summary>Gets or sets the distance (in pixels) between the border and contents of the cell.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonListClassCellPaddingTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonListClass.CellPadding&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.CellSpacing">
            <summary>Gets or sets the distance (in pixels) between cells.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonListClassCellSpacingTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonListClass.CellSpacing&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.RepeatColumns">
            <summary>Gets or sets the number of columns to display in the LiveRadioButtonList control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonListClassRepeatColumnsTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonListClass.RepeatColumns&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.RepeatDirection">
            <summary>Gets or sets a value that indicates whether the control displays vertically or horizontally.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonListClassRepeatDirectionTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonListClass.RepeatDirection&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.RepeatLayout">
            <summary>Gets or sets the layout of the check boxes.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonListClassRepeatLayoutTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonListClass.RepeatLayout&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.TextAlign">
            <summary>Gets or sets the text alignment for the radio buttons within the group.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsRadioButtonListClassTextAlignTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.RadioButtonListClass.TextAlign&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveRadioButtonList.SelectedIndexChanged">
            <summary>Occurs when the selection from the list control changes between posts to the server.</summary><remarks>
				<p>The <b>SelectedIndexChanged</b> event is raised when the selection from the list control changes between posts to the server.</p>
				<p>
					<b>Note   </b>A list control must persist some values between posts to the server for this event to work correctly. Be sure that view state is enabled for the list control.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveRadioButtonList.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveSound">
            <summary>Plays a sound file client-side during a callback.</summary><remarks>
				<p>Use LiveSound.Play to play a sound file located at LiveSound.Source.</p>
				<p>
				NOTE! Only Internet Explorer has the capability of playing sounds from a callback by default. 
				Other browser types (Mozilla, Opera, etc) use a Flash movie to play the sound from a callback. For these browsers, the played sound must
				be MP3 format.
				</p>
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic">
'In this example, items are added to a Live List using Items.Add
'The items are sounds to be played, located in a "sounds" folder
'When one of the items is selected, the corresponding sound is played
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Add items to the Live list control via the ListItemCollection
    LiveList1.Items.Add("chord.wav")
    LiveList1.Items.Add("chimes.wav")
    LiveList1.Items.Add("exclamation.wav")
    LiveList1.Items.Add("error.wav")
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When an item in the LiveList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveList1.Items(LiveList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List using Items.Add
//The items are sounds to be played, located in a "sounds" folder
//When one of the items is selected, the corresponding sound is played
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Add items to the Live List control via the ListItemCollection
	LiveList1.Items.Add("chord.wav");
	LiveList1.Items.Add("chimes.wav");
	LiveList1.Items.Add("exclamation.wav");
	LiveList1.Items.Add("error.wav");
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the Live List is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveList1.Items[LiveList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.#ctor">
            <summary>Initializes a new instance of LiveSound.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveSound.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.Play">
            <summary>Plays a sound file.</summary><remarks>
				<p>When used in a callback, plays the sound effect specified by LiveSound.Source. No effect when called in a postback.</p>
			</remarks>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic">
'In this example, items are added to a Live List using Items.Add
'The items are sounds to be played, located in a "sounds" folder
'When one of the items is selected, the corresponding sound is played
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Add items to the Live list control via the ListItemCollection
    LiveList1.Items.Add("chord.wav")
    LiveList1.Items.Add("chimes.wav")
    LiveList1.Items.Add("exclamation.wav")
    LiveList1.Items.Add("error.wav")
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When an item in the LiveList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveList1.Items(LiveList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List using Items.Add
//The items are sounds to be played, located in a "sounds" folder
//When one of the items is selected, the corresponding sound is played
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Add items to the Live List control via the ListItemCollection
	LiveList1.Items.Add("chord.wav");
	LiveList1.Items.Add("chimes.wav");
	LiveList1.Items.Add("exclamation.wav");
	LiveList1.Items.Add("error.wav");
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the Live List is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveList1.Items[LiveList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveSound.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveSound.Source">
            <summary>Gets or sets the path of the sound file to play.</summary><remarks>
				<p>Use this property to specify the path of a sound file to play when the LiveSound.Play is invoked.</p>
			</remarks><value>The path of the sound file.</value>
            <example>
The following example demonstrates adding items to a Live List control from a database, as well as updating a LiveImage control.

<code lang="Visual Basic">
'In this example, items are added to a Live List using Items.Add
'The items are sounds to be played, located in a "sounds" folder
'When one of the items is selected, the corresponding sound is played
'LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

Private Sub LiveButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveButton1.Click
    'Add items to the Live list control via the ListItemCollection
    LiveList1.Items.Add("chord.wav")
    LiveList1.Items.Add("chimes.wav")
    LiveList1.Items.Add("exclamation.wav")
    LiveList1.Items.Add("error.wav")
End Sub

Private Sub LiveList1_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LiveList1.SelectedIndexChanged
    'When an item in the LiveList is selected or de-selected
    'The selected sound that is topmost in the list will play
    If (LiveList1.SelectedIndex &gt; -1) Then
        LiveSound1.Source = "sounds/" + LiveList1.Items(LiveList1.SelectedIndex).ToString()
        LiveSound1.Play()
    End If
End Sub

</code>
<code lang="C#">
//In this example, items are added to a Live List using Items.Add
//The items are sounds to be played, located in a "sounds" folder
//When one of the items is selected, the corresponding sound is played
//LiveList1 could be a LiveListBox, LiveDropDownList, LiveRadioButtonList or LiveCheckBoxList

private void LiveButton1_Click(object sender, System.EventArgs e)
{
	//Add items to the Live List control via the ListItemCollection
	LiveList1.Items.Add("chord.wav");
	LiveList1.Items.Add("chimes.wav");
	LiveList1.Items.Add("exclamation.wav");
	LiveList1.Items.Add("error.wav");
}

private void LiveList1_SelectedIndexChanged(object sender, System.EventArgs e)
{
	//When an item in the Live List is selected or de-selected
	//The selected sound that is topmost in the list will play
	if (LiveList1.SelectedIndex &gt; -1)
	{
		LiveSound1.Source = "sounds/" + LiveList1.Items[LiveList1.SelectedIndex];
		LiveSound1.Play();
	}
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.StyleUtility">
            <summary>
            Summary description for StyleUtility.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveTableCell">
            <summary>
			Represents a cell in a LiveTable control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTableCellClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TableCell&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.#ctor">
            <summary>
			Initializes a new instance of the LiveTableCell class.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTableCellClassCtorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TableCell Constructor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTableCell.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.RowSpan">
            <summary>
			Gets or sets the number of rows in the LiveTable control that the cell spans.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTableCellClassRowSpanTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TableCell.RowSpan&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Text">
            <summary>
			Gets or sets the text contents of the cell.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTableCellClassTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TableCell.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.TagKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTableCell.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTableCell.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveTemplateColumn">
            <summary>
			Represents a column type for the DataGrid control that allows you to customize the layout of controls in the column.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTemplateColumnTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TemplateColumn&lt;z/MSHelp:link&gt;z.
			<p><b>   Note</b>   In order for LiveTemplateColumn contents to be modified during a Callback, those contents must be PowerWEB controls.
For example, if the column's ItemTemplate contains a standard Label control whose properties must be changed during a callback, this Label must be replaced by a LiveLabel.
 Non-PowerWEB controls will only have their properties updated when the LiveDataGrid is rendered as a result of a DataBind() call.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTemplateColumn.#ctor">
            <summary>
			Initializes a new instance of the TemplateColumn class.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTemplateColumnctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TemplateColumn Constructor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTemplateColumn.InitializeCell(System.Web.UI.WebControls.TableCell,System.Int32,System.Web.UI.WebControls.ListItemType)">
            <summary>
			This member overrides DataGridColumn.InitializeCell.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTemplateColumnInitializeCellTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TemplateColumn.InitializeCell&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTemplateColumn.EditItemTemplate">
            <summary>
			Gets or sets the template for displaying the item selected for editing in a TemplateColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTemplateColumnEditItemTemplateTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TemplateColumn.EditItemTemplate&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTemplateColumn.FooterTemplate">
            <summary>
			Gets or sets the template for displaying the footer section of the TemplateColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTemplateColumnFooterTemplateTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TemplateColumn.FooterTemplate&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTemplateColumn.HeaderTemplate">
            <summary>
			Gets or sets the template for displaying the heading section of the TemplateColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTemplateColumnHeaderTemplateTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TemplateColumn.HeaderTemplate&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTemplateColumn.ItemTemplate">
            <summary>
			Gets or sets the template for displaying a data item in a TemplateColumn.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTemplateColumnItemTemplateTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TemplateColumn.ItemTemplate&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveTextBox">
            <summary>Displays a text box control for user input.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTextBoxClassTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TextBoxClass&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.#ctor">
            <summary>Initializes a new instance of LiveTextBox.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTextBoxClassctorTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TextBoxClassctor&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>When implemented by a class, processes post back data for an ASP.NET server control.</summary><remarks>
				<p>The Web Forms page framework tracks all the server control's that return true to this method call, then invokes the IPostBackDataHandler.RaisePostDataChangedEvent on those controls.</p>
			</remarks><param name="postDataKey">The key identifier for the control.</param><param name="postCollection">The collection of all incoming name values.</param><value><b>true</b> if the server control's state changes as a result of the post back; otherwise <b>false</b>.</value>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTextBox.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent">
            <summary>When implemented by a class, signals the server control object to notify the ASP.NET application that the state of the control has changed.</summary><remarks>
				<p>Change events for the server control that implements this interface, if any, are raised from this method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.AccessKey">
            <summary>
			Gets or sets the access key (underlined letter) that allows you to quickly navigate to the Web server control.
			</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassAccessKeyTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.AccessKey&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Enabled">
            <summary>Gets or sets a value indicating whether the Web server control is enabled.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassEnabledTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Enabled&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.TabIndex">
            <summary>Gets or sets the tab index of the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassTabIndexTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.TabIndex&lt;z/MSHelp:link&gt;z.
			</remarks><exception cref="T:System.ArgumentOutOfRangeException">The specified tab index is not between -32768 and 32767.</exception>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.ToolTip">
            <summary>Gets or sets the text displayed when the mouse pointer hovers over the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassToolTipTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControlClass.ToolTip&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.AutoPostBack">
            <summary>Gets or sets a value indicating whether an automatic postback (or callback) to the server will occur whenever the user modifies the text in the LiveTextBox control and then tabs out of the control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTextBoxClassAutoPostBackTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TextBoxClass.AutoPostBack&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Text">
            <summary>Gets or sets the text content of the LiveTextBox control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsTextBoxClassTextTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.TextBoxClass.Text&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Visible">
            <summary>Gets or sets a value indicating whether the PowerWEB control is visible.</summary><remarks>
				<p>Use the <b>Visible</b> property to specify or determine whether a control is visible. When set to <b>false</b>, the control is rendered, but is hidden.</p>
			</remarks><value><b>true</b> if the control is visible on the page; otherwise <b>false</b>. The default is <b>true</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Font">
            <summary>Gets the font properties associated with the Web server control.</summary><remarks>
			This member is functionally equivalent to &lt;zMSHelp:link keywords="frlrfSystemWebUIWebControlsWebControlClassFontTopic" indexMoniker="!DefaultAssociativeIndex"  tabindex="0"&gt;zSystem.Web.UI.WebControls.WebControl.Font&lt;z/MSHelp:link&gt;z.
			</remarks>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Left">
            <summary>Gets or sets the left position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Left</b> property to specify the left position of the PowerWEB control.  If both <b>Left</b> and Top are Unit.Empty (the default), relative positioning is used. If <i>either </i>
					<b>Left</b> or Top are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the left position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTextBox.Top">
            <summary>Gets or sets the top position of the PowerWEB control.</summary><remarks>
				<p>Use the <b>Top</b> property to specify the top position of the PowerWEB control.  If both Left and <b>Top</b> are Unit.Empty (the default), relative positioning is used. If <i>either</i> Left or <b>Top</b> are not Unit.Empty, absolute positioning is used.</p>
			</remarks><value>A Unit that represents the top position of the control. The default is Unit.Empty.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.ContextMenuChanged">
            <summary>Occurs when the right button of the PowerWEB control is clicked.</summary><remarks>
				<p>The <b>ContextMenuChanged</b> event fires when the right button is clicked.  This event is the equivalent of the Click event for the left button.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.GotFocus">
            <summary>Occurs when the PowerWEB control gains focus.</summary><remarks>
				<p>The <b>GotFocus</b> event fires when the PowerWEB control gains focus.  LostFocus fires when the PowerWEB control loses focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.LostFocus">
            <summary>Occurs when the PowerWEB control loses focus.</summary><remarks>
				<p>The <b>LostFocus</b> event fires when the PowerWEB control loses focus.  GotFocus fires when the PowerWEB control gains focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.LocationClick">
            <summary>Occurs when the PowerWEB control is clicked, providing location data.</summary><remarks>
				<p>The <b>LocationClick</b> event fires when the PowerWEB control is clicked, providing <b>Top</b> and <b>Left</b> location data.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.DoubleClick">
            <summary>Occurs when the control is double-clicked.</summary><remarks>
				<p>The <b>DoubleClick</b> event fires when the control is double-clicked.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.HelpRequested">
            <summary>Occurs when F1 is pressed while the control has focus.</summary><remarks>
				<p>The <b>HelpRequested</b> event fires when F1 is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.KeyDown">
            <summary>Occurs when a key is down while the control has focus.</summary><remarks>
				<p>The <b>KeyDown</b> event fires when a key is down while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.KeyPress">
            <summary>Occurs when a key is pressed while the control has focus.</summary><remarks>
				<p>The <b>KeyPress</b> event fires when a key is pressed while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.KeyUp">
            <summary>Occurs when a key is released while the control has focus.</summary><remarks>
				<p>The <b>KeyUp</b> event fires when a key is released while the control has focus.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.MouseDown">
            <summary>Occurs when the mouse buttons are pressed while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseDown</b> event fires when any button is pressed.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.MouseEnter">
            <summary>Occurs when the mouse pointer enters the PowerWEB control.</summary><remarks>
				<p>The <b>MouseEnter</b> event fires when the mouse pointer enters the PowerWEB control.  MouseLeave will fire when the mouse pointer leaves the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.MouseLeave">
            <summary>Occurs when the mouse pointer leaves the PowerWEB control.</summary><remarks>
				<p>The <b>MouseLeave</b> event fires when the mouse pointer leaves the PowerWEB control.  MouseEnter will fire when the mouse pointer enters the control.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTextBox.MouseUp">
            <summary>Occurs when the mouse buttons are released while the PowerWEB control has focus.</summary><remarks>
				<p>The <b>MouseUp</b> event fires when any button is released.</p>
			</remarks>
            <example>
The following example demonstrates PowerWEB events not found in other Server controls.

<code lang="Visual Basic">
'In this example, events fire as the user interacts with a PowerWEB Control
'These events are not found in non-PowerWEB Server controls
'When an event is raised, a PowerWEB control updates with a message

Private Sub PowerWEBControl1_ContextMenuChanged(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.ContextMenuChanged
    PowerWEBControl1.Text = "You pressed the right button"
End Sub

Private Sub PowerWEBControl1_DoubleClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.DoubleClick
    PowerWEBControl1.Text = "That was a nice double-click"
End Sub

Private Sub PowerWEBControl1_GotFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.GotFocus
    PowerWEBControl1.Text = "I am focused"
End Sub

Private Sub PowerWEBControl1_HelpRequested(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.HelpRequested
    PowerWEBControl1.Text = "You pressed F1  Need some help?"
End Sub

Private Sub PowerWEBControl1_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyDown
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down"
End Sub

Private Sub PowerWEBControl1_KeyPress(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyPress
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed"
End Sub

Private Sub PowerWEBControl1_KeyUp(ByVal sender As Object, ByVal e As KeyEventArgs) Handles PowerWEBControl1.KeyUp
    PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up"
End Sub

Private Sub PowerWEBControl1_LocationClick(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.LocationClick
    PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")"
End Sub

Private Sub PowerWEBControl1_LostFocus(ByVal sender As Object, ByVal e As System.EventArgs) Handles PowerWEBControl1.LostFocus
    PowerWEBControl1.Text = "I'm losing focus"
End Sub

Private Sub PowerWEBControl1_MouseDown(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseDown
    PowerWEBControl1.Text = "Down goes the mouse button"
End Sub

Private Sub PowerWEBControl1_MouseEnter(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseEnter
    PowerWEBControl1.Text = "That tickles"
End Sub

Private Sub PowerWEBControl1_MouseLeave(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseLeave
    PowerWEBControl1.Text = "Come back"
End Sub

Private Sub PowerWEBControl1_MouseUp(ByVal sender As Object, ByVal e As LocationEventArgs) Handles PowerWEBControl1.MouseUp
    PowerWEBControl1.Text = "Up goes the mouse button"
End Sub

</code>
<code lang="C#">
//In this example, events fire as the user interacts with a PowerWEB Control
//These events are not found in non-PowerWEB Server controls
//When an event is raised, a PowerWEB control updates with a message

private void PowerWEBControl1_ContextMenuChanged(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed the right button!";
}

private void PowerWEBControl1_DoubleClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That was a nice double-click!";
}

private void PowerWEBControl1_GotFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I am focused!";
}

private void PowerWEBControl1_HelpRequested(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "You pressed F1!  Need some help?";
}

private void PowerWEBControl1_KeyDown(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone down!";
}

private void PowerWEBControl1_KeyPress(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has been pressed!";
}

private void PowerWEBControl1_KeyUp(object sender, KeyEventArgs e)
{
	PowerWEBControl1.Text = "The " + Convert.ToChar(e.KeyCode).ToString() + " key has gone up!";
}

private void PowerWEBControl1_LocationClick(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "The button was pressed at (" + e.X.ToString() + "," + e.Y.ToString() + ")!";
}

private void PowerWEBControl1_LostFocus(object sender, System.EventArgs e)
{
	PowerWEBControl1.Text = "I'm losing focus!";
}

private void PowerWEBControl1_MouseDown(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Down goes the mouse button!";
}

private void PowerWEBControl1_MouseEnter(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "That tickles!";
}

private void PowerWEBControl1_MouseLeave(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Come back!";
}

private void PowerWEBControl1_MouseUp(object sender, LocationEventArgs e)
{
	PowerWEBControl1.Text = "Up goes the mouse button!";
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveTimer">
            <summary>Implements a timer that raises an event at user-defined intervals.</summary><remarks>
				<p>A <b>LiveTimer</b> is used to raise an event at user-defined intervals.  When using the timer, use the LiveTimer.Tick event to perform a polling operation or to display a splash screen for a specified amount of time. Whenever the LiveTimer.Enabled property is set to true and the LiveTimer.Interval property is greater than zero, the LiveTimer.Tick event is raised at intervals based on the LiveTimer.Interval property setting.</p>
				<p>If the LiveTimer attempts to raise a callback, and there is a pending LiveTimer callback which has not yet completed, the
				current callback attempt will be cancelled without any exceptions thrown. This results in a very consistent interval period if every callback completes successfully. One useful advantage of this approach is you can set
				the Interval property to 1, and the LiveTimer will raise a callback immediately after the previous LiveTimer callback completes, 
				enabling you to update the interface as close to real time as possible. Please note, this behavior does NOT apply to other PowerWEB controls, 
				but is specific to the LiveTimer control.
				For example, it is possible for the same LiveButton to raise two callbacks at the same time if needed.
				</p>
				<p>
					<b>Note</b> Due to network lag and other considerations, the <b>LiveTimer</b> interval will not be as precise as a Windows application Timer. Also, the LiveTimer.Interval should be large enough to account for possible delays such as network lag.</p>
				<p>This class provides methods to set the interval, and to start and stop the timer.</p>
			</remarks>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.#ctor">
            <summary>Initializes a new instance of LiveTimer.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveTimer.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.Start">
            <summary>Starts the timer.</summary><remarks>
				<p>Causes the Timer.Tick event to be raised in the interval specified by LiveTimer.Interval. This can be called in a callback or postback.</p>
				<p>
					<b>   Note</b>   This method sets the LiveTimer.Enabled property of the LiveTimer control to <b>true</b>.</p>
			</remarks>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.Stop">
            <summary>Stops the timer.</summary><remarks>
				<p>Causes the Timer.Tick event to stop being raised.</p>
				<p>
					<b>   Note</b>   This method sets the LiveTimer.Enabled property of the LiveTimer control to <b>false</b>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.GetCallbackEventReference(System.String,System.String)">
            <summary>Returns JavaScript that can be used to initiate a callback to the server.</summary><remarks>
				<p>Returns JavaScript that can be used to initiate a callback to the server.</p>
				<p>The settings of the PowerWEB control (blocking, errorhandling, etc) are automatically taken into account.</p>
			</remarks><param name="eventName">The event corresponding to the callback.</param><param name="argument">The event arguments for the callback.</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveTimer.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.Enabled">
            <summary>Gets or sets whether the timer is running.</summary><remarks>
				<p>Use this property to start the timer.</p>
				<p>LiveTimer.Start sets <b>Enabled</b> to <b>true</b>, LiveTimer.Stop sets <b>Enabled</b> to <b>false</b>.</p>
			</remarks><value><b>true</b> if the timer is currently enabled; otherwise, <b>false</b>. The default is <b>false</b>.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.Interval">
            <summary>Gets or sets the time interval (in milliseconds) for which the Timer.Tick event is raised.</summary><remarks>
				<p>Use this property to specify the time interval (in milliseconds) for which the Timer.Tick event is raised.</p>
				<p>This property does not have any effect unless the LiveTimer is enabled, either by setting <b>Enabled</b> to true, or by calling LiveTimer.Start</p>
			</remarks><value>The time interval between LiveTimer.Tick events for the LiveTimer control.  The default is 5000.</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.IsStarted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.Blocking">
            <summary>Gets or sets the blocking state of the control.</summary><remarks>
				<p>Although callbacks always occur asynchronously, when this property is <b>true</b>, a simulated blocking will be used. The interface will be disabled and updated as busy when a callback is pending (although the code itself will not block). </p>
				<p>
					<b>   Note</b>   Only PowerWEB controls will be blocked. The user will still be able to interact with non-PowerWEB controls.</p>
			</remarks><value><b>true</b> if other PowerWEB controls should be disabled while the PowerWEB control has a pending callback.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.EnableCallback">
            <summary>Gets or sets whether the control issues a callback.</summary><remarks>
				<p>Set <b>EnableCallback</b> to <b>true</b> for the PowerWEB control to use callbacks, as opposed to traditional postbacks.</p>
				<p>Set to <b>false</b> to force the control to behave like its non-live counterpart.</p>
			</remarks><value>
				<b>true</b> if the PowerWEB control uses callbacks.  When <b>false</b>, the PowerWEB control uses traditional postbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.ErrorBehavior">
            <summary>Gets or sets how errors are handled by the control.</summary><remarks>
				<p>Set <b>ErrorBehavior</b> to specify whether an exception raised by the PowerWEB control should cause an error page, an alert box, or no indication to appear.</p>
				<p>If set to ErrorBehavior.ShowAlert, set the alert message using the ErrorMessage property.</p>
			</remarks><value>An ErrorBehavior enumerated value.  Defaults to ErrorBehavior.ShowInBrowser.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.ErrorMessage">
            <summary>Gets or sets the message that is displayed if an error occurs and ErrorBehavior is ErrorBehavior.ShowAlert.</summary><remarks>
				<p>Set <b>ErrorMessage</b> to specify the contents of the Alert.  Alternatively, set ErrorBehavior to ErrorBehavior.ShowInBrowser to see specific error information.</p>
			</remarks><value>A message to display when an error occurs.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.UpdateAll">
            <summary>Gets or sets which fields are posted to the server in a callback.</summary><remarks>
				<p>
					If true, all values for all client-side form elements are posted to the server. If false, only
					the value for the callback element is posted to the server. This can be used to highly optimize
					performance depending on the application. For example, if an application has a lot of form fields
					with a Timer raising a periodic callback, the callback lag may be signifigant, as the script has to
					loop through all of the form fields to get the client-side value. However, this may not be necessary.
					Often, you may only need to raise a callback, and don't need the values for form fields. In this case
					set this property to false, and the callback will execute much faster.
				</p>
			</remarks><value>If true, all values for all client-side form elements are posted to the server. If false, only
			the value for the callback element is posted to the server. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.WaitElementID">
            <summary>Gets or sets the message ID of the HTML element to display a message during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitMessage property.</p>
				<p>Set <b>WaitElementID</b> to specify the ID of the control that will display the WaitMessage during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing..") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The ID of an HTML element, such as a Label, that will display a message during pending callbacks.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveTimer.WaitMessage">
            <summary>Gets or sets the message to display during a pending callback.</summary><remarks>
				<p>Use in conjunction with the WaitElementID property.</p>
				<p>Set <b>WaitMessage</b> to specify the message displayed by the WaitElementID control during a pending callback.</p>
				<p>Typical usage would be for immediately displaying a message (such as "Processing...") to the user during lengthy callbacks (due to network traffic or server side processing).</p>
			</remarks><value>The message displayed during pending callbacks.</value>
        </member>
        <member name="E:Dart.PowerWEB.LiveControls.LiveTimer.Tick">
            <summary>Occurs periodically based on the LiveTimer.Interval property.</summary><remarks>
				<p>The <b>Tick</b> event fires when the interval since the last <b>Tick</b> event has elapsed.</p>
			</remarks>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.LiveWrapper">
            <summary>A container used to wrap 3rd party controls so they can be updated from a callback.</summary><remarks>
				<p>
				Often, 3rd party controls use complex or nonstandard rendering techniques that require special
				handling to change their appearance in a callback. Controls of this type can be placed within a LiveWrapper
				control, which performs this special handling.
				</p>
				<p>
				To use the LiveWrapper with a 3rd party control, first drag an instance of the 3rd party onto the webform.  After configuring the control using its design support, drag an instance of LiveWrapper onto the webform.  Finally, access the HTML tag view, and modify the tags so the LiveWrapper tags are completely enclosing ALL of the 3rd party control's tags.  For example:
				</p>
				<code>
				&lt;cc1:LiveWrapper id="LiveWrapper1" runat="server"&gt;
					&lt;asp:AnyControl id="AnyControl1" style="Z-INDEX: 101; LEFT: 104px; POSITION: absolute; TOP: 88px" runat="server" Text="AnyControl" Width="153px" Height="40px"&gt;
					&lt;/asp:AnyControl&gt;
				&lt;/cc1:LiveWrapper&gt;
				</code>
				<p>It should be noted that the control may not render correctly in design time, but it should be rendered correctly at runtime.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.#ctor">
            <summary>Initializes a new instance of LiveWrapper.</summary><remarks>
				<p>The default constructor initializes a new instance of LiveWrapper.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.#ctor(System.String)">
            <summary>This constructor is used primarily by control developers.</summary><remarks>
			This constructor is used primarily by control developers.
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.GetViewState">
            <summary>Returns the ViewState object used to save and restore state.</summary><remarks>
				<p>Returns the ViewState object used by PowerWEB controls to save and restore state.</p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.GetScript">
            <summary>Returns all JavaScript buffered up as a result of setting control properties.</summary><remarks>
				<p>Returns all JavaScript buffered up as a result of setting properties of controls on the form. </p>
				<p>
					<b>   Note</b>   This is not intended for use by end-users.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.GetScriptStyleReference">
            <summary>Returns a client-side reference to the style object of the element.</summary><remarks>
				<p>Returns a client-side reference to the style object of the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1").style" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.GetScriptObjectReference">
            <summary>Returns a client-side reference to the element.</summary><remarks>
				<p>Returns a client-side reference to the element corresponding to the PowerWEB control.</p>
				<p>For example, if the PowerWEB control is <i>LiveButton1</i>, it would return "pwObj("LiveButton1")" (depending on the browser).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.LoadViewState(System.Object)">
            <summary>
            
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.OnInit(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.LiveWrapper.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveWrapper.BrowserType">
            <summary>Gets or sets the type of browser as detected by the PowerWEB control.</summary><remarks>
				<p>This property is set when the PowerWEB control is initialized, based on the user-agent header sent by the browser.  <b>BrowserType</b> can also be set to override the detected value with a custom browser detection algorithm.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.  Any change to an individual PowerWEB control will automatically be applied to all PowerWEB controls on the form.  It is not possible to have PowerWEB controls with different BrowserType values on the same form.</p>
			</remarks><value>A BrowserType that represents the browser rendering the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveWrapper.CallbackType">
            <summary>Gets or sets the type of callbacks performed by the PowerWEB control.</summary><remarks>
				<p>The optimal approach is CallbackType.XmlHttp.  The first fallback approach is CallbackType.Flash.  The final fallback is CallbackType.IFrame.</p>
				<p>Defaults to CallbackType.AutoDetect.  On the initial page load, <b>CallbackType</b> is set to the most appropriate value based on the browser type detected.</p>
				<p>Set to override when auto-detection is insufficient. For example, if the browser has ActiveX turned off, XmlHttp and Flash will fail.  However, the PowerWEB controls will not be aware of this, because this setting cannot be detected server-side. A developer can determine if ActiveX is off and set to IFRAME to provide a decent callback approach.</p>
			</remarks><value>A CallbackType that represents the mechanism used for callbacks by the PowerWEB control.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveWrapper.BufferedScript">
            <summary>Gets the client-side script which will be written to the response stream when the callback request is ended.</summary><remarks>
				<p>Use the <b>BufferedScript</b> property to modify the client-side script to be sent in response to a callback.</p>
				<p>For example, to dynamically change the flow of a label (from bottom to top instead of left to right):</p>
				<p>LiveLabel1.BufferedScript.Write(LiveLabel1.GetScriptStyleReference() + ".writingMode = 'tb-rl';");</p>
			</remarks><value>A StringWriter object that contains buffered script for a callback response.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveWrapper.Debug">
            <summary>Set to true to display a debug window which displays callback data in real-time as it is set/received.</summary><remarks>
				<p>
					This property is intended to be used by application developers to assist in diagnosis of application bugs.
					Set this property to true to see the JavaScript that is executed on the client-side as a result of the 
					server-side interaction with the controls. 
				</p>
			</remarks><value>
				true if a debug window is displayed when callback data is sent/received; false otherwise. The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveWrapper.IsCallback">
            <summary>Gets the callback state of the PowerWEB control.</summary><remarks>
				<p>Use the <b>IsCallback</b> property to differentiate between a postback and live callback.</p>
				<p>
					<b>   Note</b>   This property is global to all PowerWEB controls.</p>
			</remarks><value><b>true</b> if the PowerWEB control is currently in a callback state, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveWrapper.IsLive">
            <summary>Gets or sets whether a PowerWEB control updates itself in a callback.</summary><remarks>
				<p>Defaults to <b>true</b>.  Set the <b>IsLive</b> property to <b>false</b> to prevent the PowerWEB control from updating itself during a callback, even if it is changed in code behind.</p>
			</remarks><value><b>true</b> if the PowerWEB control should update itself during a callback, <b>false</b> otherwise.</value>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.LiveWrapper.Tag">
            <summary>Gets or sets a convertible object that contains data about the control.</summary><remarks>
				<p>Any type that implements IConvertible can be assigned to this property.  If the <b>Tag</b> property is set through the Windows Forms designer, only text can be assigned.</p>
				<p>Data contained within the <b>Tag</b> property persists across callbacks.  A common use for the <b>Tag</b> property is to store data that is closely associated with the control.</p>
			</remarks><value>An object that implements the IConvertible interface and contains data about the PowerWEB control.  The default is a null reference (<b>Nothing</b> in Visual Basic).</value>
            <example>
The following example demonstrates using a LiveTimer to periodically update a LiveControl.

<code lang="Visual Basic">
'In this example, A LiveTimer periodically updates the color of a LiveLabel
'It also demonstrates using the Tag property to persist information over callbacks

Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
    If (Not Me.IsPostBack) Then
        'Set default values for the label
        LiveLabel1.BorderWidth = New Unit(4)
        LiveLabel1.BorderColor = Color.Red
        LiveLabel1.ForeColor = Color.Red

        'Use the Tag property to keep track of color index
        LiveLabel1.Tag = 0
        LiveLabel1.Text = "This Message will change color every few seconds"

        'Start the Timer.  It will fire a Tick event every 2 seconds
        LiveTimer1.Interval = 2000
        LiveTimer1.Start()
    End If
End Sub

Private Sub LiveTimer1_Tick(ByVal sender As Object, ByVal e As System.EventArgs) Handles LiveTimer1.Tick
    Dim color As Color = color.Red

    'Add 1 to the color index
    Dim index As Integer = Convert.ToInt16(LiveLabel1.Tag) + 1
    LiveLabel1.Tag = index Mod 6  'mod 6 - cycle 0 to 6
    Select Case (index)
    Case 0
        color = color.Red
        Case 1
        color = color.Orange
        Case 2
        color = color.Yellow
        Case 3
        color = color.Green
        Case 4
        color = color.Blue
        Case 5
        color = color.Purple
    End Select

    'Update the LiveLabel's Color
    LiveLabel1.BorderColor = color
    LiveLabel1.ForeColor = color
End Sub

</code>
<code lang="C#">
//In this example, A LiveTimer periodically updates the color of a LiveLabel
//It also demonstrates using the Tag property to persist information over callbacks

private void Page_Load(object sender, System.EventArgs e)
{
	if (!this.IsPostBack)
	{
		//Set default values for the label
		LiveLabel1.BorderWidth = 4;
		LiveLabel1.BorderColor = Color.Red;
		LiveLabel1.ForeColor = Color.Red;

		//Use the Tag property to keep track of color index
		LiveLabel1.Tag = 0;
		LiveLabel1.Text = "This Message will change colors every few seconds!";

		//Start the Timer.  It will fire a Tick event every 2 seconds
		LiveTimer1.Interval = 2000;
		LiveTimer1.Start();
	}
}

private void LiveTimer1_Tick(object sender, System.EventArgs e)
{
	Color color = Color.Red;

	//Add 1 to the color index
	int index = Convert.ToInt16(LiveLabel1.Tag) + 1;
	LiveLabel1.Tag = index%6;  //mod 6 - cycle 0 to 6
	switch (index)
	{
		case 0:
			color = Color.Red;
			break;
		case 1:
			color = Color.Orange;
			break;
		case 2:
			color = Color.Yellow;
			break;
		case 3:
			color = Color.Green;
			break;
		case 4:
			color = Color.Blue;
			break;
		case 5:
			color = Color.Purple;
			break;
	}

	//Update the LiveLabel's Color
	LiveLabel1.BorderColor = color;
	LiveLabel1.ForeColor = color;
}

</code>
</example>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.PageParser">
            <summary>
            Summary description for StyleParser.
            </summary>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.ResourceHttpHandler">
            <summary>
            Summary description for ResourceHttpHandler.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ResourceHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Load the resource specified in the query string and return it
            as the HTTP response.
            </summary>
            <param name="hc">The context object for the request</param>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.ResourceHttpHandler.ReadBinaryResource(System.IO.Stream,System.Byte[]@,System.Int32@)">
            <summary>
            Read a binary resource such as an image in from the stream.  Since
            the size of the resource cannot be obtained, it is read in a block
            at a time until the end of the stream is reached.
            </summary>
            <param name="sIn">The stream from which to read the resource</param>
            <param name="byBuffer">An out parameter to receive the resource bytes</param>
            <param name="nLen">An out parameter to receive the resource length</param>
        </member>
        <member name="P:Dart.PowerWEB.LiveControls.ResourceHttpHandler.IsReusable">
            <summary>
            This property is used to indicate that the object instance can
            be used by other requests.  It always returns true.
            </summary>
        </member>
        <member name="T:SerialNumber">
            <summary>
            Summary description for SerialNumber.
            </summary>
        </member>
        <member name="M:SerialNumber.GetSystemNumber">
            <summary>
            Return a unique volume number that can be used for license validation at design-time
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dart.PowerWEB.LiveControls.Shared">
            <summary>
            Summary description for Shared.
            </summary>
        </member>
        <member name="M:Dart.PowerWEB.LiveControls.Shared.Split(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="Expression"></param>
            <param name="Delimiter"></param>
            <param name="SingleSeparator"></param>
            <param name="Count"></param>
            <returns></returns>
        </member>
    </members>
</doc>
